```python
import pygambit as gbt

# Create a new extensive-form game with two players: Current Manufacturer and New Manufacturer
g = gbt.Game.new_tree(players=["Current Manufacturer", "New Manufacturer"],
                      title="Manufacturer competition game with imperfect information")

# Add a chance node to represent the strength of the New Manufacturer
g.append_move(g.root, g.players.chance, ["Strong (S)", "Weak (W)"])

# Add a chance node to represent the signal sent by the New Manufacturer
g.append_move(g.root.children[0], g.players.chance, ["Strong (S)", "Weak (W)"])
g.append_move(g.root.children[1], g.players.chance, ["Strong (S)", "Weak (W)"])

# Add decision nodes for the Current Manufacturer based on the signal received
# Strong signal from New Manufacturer
g.append_move(g.root.children[0].children[0], "Current Manufacturer", ["Fight (F)", "Adapt (A)"])
g.append_move(g.root.children[0].children[1], "Current Manufacturer", ["Fight (F)", "Adapt (A)"])
# Weak signal from New Manufacturer
g.append_move(g.root.children[1].children[0], "Current Manufacturer", ["Fight (F)", "Adapt (A)"])
g.append_move(g.root.children[1].children[1], "Current Manufacturer", ["Fight (F)", "Adapt (A)"])

# Set information sets for nodes with identical information
g.set_infoset(g.root.children[0].children[0], g.root.children[0].children[1].infoset)
g.set_infoset(g.root.children[1].children[0], g.root.children[1].children[1].infoset)

# Define outcomes for each scenario based on the strength and signal
# Strong New Manufacturer, Strong Signal
g.set_outcome(g.root.children[0].children[0].children[0], g.add_outcome([1, 0], label="Strong-Signal-Fight"))
g.set_outcome(g.root.children[0].children[0].children[1], g.add_outcome([3, 1], label="Strong-Signal-Adapt"))
# Strong New Manufacturer, Weak Signal
g.set_outcome(g.root.children[0].children[1].children[0], g.add_outcome([0, 0], label="Weak-Signal-Fight"))
g.set_outcome(g.root.children[0].children[1].children[1], g.add_outcome([2, 1], label="Weak-Signal-Adapt"))
# Weak New Manufacturer, Strong Signal
g.set_outcome(g.root.children[1].children[0].children[0], g.add_outcome([0, 2], label="Strong-Signal-Fight"))
g.set_outcome(g.root.children[1].children[0].children[1], g.add_outcome([2, 1], label="Strong-Signal-Adapt"))
# Weak New Manufacturer, Weak Signal
g.set_outcome(g.root.children[1].children[1].children[0], g.add_outcome([1, 2], label="Weak-Signal-Fight"))
g.set_outcome(g.root.children[1].children[1].children[1], g.add_outcome([3, 1], label="Weak-Signal-Adapt"))

# Save the EFG
efg = g.write(format='native')
```