```python
import pygambit as gbt

# Create a new extensive-form game with two players
g = gbt.Game.new_tree(players=["Player 1", "Player 2"], title="Imperfect Information Game")

# Player 1's first move with three actions: A, B, C
g.append_move(g.root, "Player 1", ["A", "B", "C"])

# Player 2's move after Player 1 chooses A
g.append_move(g.root.children[0], "Player 2", ["D", "E", "F"])

# Player 2's move after Player 1 chooses B or C
g.append_move(g.root.children[1], "Player 2", ["D", "E", "F"])
g.append_move(g.root.children[2], "Player 2", ["D", "E", "F"])

# Set the information set for Player 2 when Player 1 chooses B or C
g.set_infoset(g.root.children[1], g.root.children[2].infoset)

# Player 1's move after Player 2 chooses D or E following A
g.append_move(g.root.children[0].children[0], "Player 1", ["G", "H"])
g.append_move(g.root.children[0].children[1], "Player 1", ["G", "H"])

# Player 1's move after Player 2 chooses D or E following B or C
g.append_move(g.root.children[1].children[0], "Player 1", ["G", "H"])
g.append_move(g.root.children[1].children[1], "Player 1", ["G", "H"])
g.append_move(g.root.children[2].children[0], "Player 1", ["G", "H"])
g.append_move(g.root.children[2].children[1], "Player 1", ["G", "H"])

# Set the information set for Player 1's move after Player 2 chooses D or E following B or C
g.set_infoset(g.root.children[1].children[0], g.root.children[2].children[0].infoset)
g.set_infoset(g.root.children[1].children[1], g.root.children[2].children[1].infoset)

# Player 2's move after Player 1 chooses G
g.append_move(g.root.children[0].children[0].children[0], "Player 2", ["Q", "W"])
g.append_move(g.root.children[0].children[1].children[0], "Player 2", ["Q", "W"])
g.append_move(g.root.children[1].children[0].children[0], "Player 2", ["Q", "W"])
g.append_move(g.root.children[1].children[1].children[0], "Player 2", ["Q", "W"])
g.append_move(g.root.children[2].children[0].children[0], "Player 2", ["Q", "W"])
g.append_move(g.root.children[2].children[1].children[0], "Player 2", ["Q", "W"])

# Set the information set for Player 2's move after Player 1 chooses G
g.set_infoset(g.root.children[0].children[0].children[0], g.root.children[0].children[1].children[0].infoset)
g.set_infoset(g.root.children[1].children[0].children[0], g.root.children[1].children[1].children[0].infoset)
g.set_infoset(g.root.children[2].children[0].children[0], g.root.children[2].children[1].children[0].infoset)

# Define outcomes
outcome_H = g.add_outcome([2, -1], label="Player 1 chooses H")
outcome_Q = g.add_outcome([3, 3], label="Both players get 3")
outcome_W = g.add_outcome([0, 0], label="Both players get 0")

# Set outcomes for Player 1 choosing H
g.set_outcome(g.root.children[0].children[0].children[1], outcome_H)
g.set_outcome(g.root.children[0].children[1].children[1], outcome_H)
g.set_outcome(g.root.children[1].children[0].children[1], outcome_H)
g.set_outcome(g.root.children[1].children[1].children[1], outcome_H)
g.set_outcome(g.root.children[2].children[0].children[1], outcome_H)
g.set_outcome(g.root.children[2].children[1].children[1], outcome_H)

# Set outcomes for Player 2 choosing Q or W
g.set_outcome(g.root.children[0].children[0].children[0].children[0], outcome_Q)
g.set_outcome(g.root.children[0].children[0].children[0].children[1], outcome_W)
g.set_outcome(g.root.children[0].children[1].children[0].children[0], outcome_Q)
g.set_outcome(g.root.children[0].children[1].children[0].children[1], outcome_W)
g.set_outcome(g.root.children[1].children[0].children[0].children[0], outcome_Q)
g.set_outcome(g.root.children[1].children[0].children[0].children[1], outcome_W)
g.set_outcome(g.root.children[1].children[1].children[0].children[0], outcome_Q)
g.set_outcome(g.root.children[1].children[1].children[0].children[1], outcome_W)
g.set_outcome(g.root.children[2].children[0].children[0].children[0], outcome_Q)
g.set_outcome(g.root.children[2].children[0].children[0].children[1], outcome_W)
g.set_outcome(g.root.children[2].children[1].children[0].children[0], outcome_Q)
g.set_outcome(g.root.children[2].children[1].children[0].children[1], outcome_W)

# Save the EFG
efg = g.write(format='native')
```