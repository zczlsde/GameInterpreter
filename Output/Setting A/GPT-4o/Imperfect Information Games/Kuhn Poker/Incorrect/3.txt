```python
import pygambit as gbt

# Create a new extensive-form game with two players: Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Three-card poker game")

# The game starts with a chance node that deals cards to Alice and Bob
# There are six possible allocations of the cards: JQ, JK, QJ, QK, KJ, and KQ
g.append_move(g.root, g.players.chance, ["JQ", "JK", "QJ", "QK", "KJ", "KQ"])

# Set the probabilities for each card allocation, each with probability 1/6
g.set_chance_probs(g.root.infoset, [gbt.Rational(1, 6)] * 6)

# For each card allocation, Alice can choose to Check or Bet
for node in g.root.children:
    g.append_move(node, "Alice", ["Check", "Bet"])

# If Alice checks, Bob can choose to Check or Bet
for node in g.root.children:
    g.append_move(node.children[0], "Bob", ["Check", "Bet"])

# If Alice bets, Bob can choose to Fold or Call
for node in g.root.children:
    g.append_move(node.children[1], "Bob", ["Fold", "Call"])

# If Bob checks after Alice checks, the game ends with the higher card winning 1 from the other player
# If Bob bets after Alice checks, Alice can choose to Fold or Call
for node in g.root.children:
    g.append_move(node.children[0].children[1], "Alice", ["Fold", "Call"])

# Set the information sets for Bob's decisions after Alice checks
g.set_infoset(g.root.children[0].children[0], g.root.children[1].children[0].infoset)
g.set_infoset(g.root.children[2].children[0], g.root.children[3].children[0].infoset)
g.set_infoset(g.root.children[4].children[0], g.root.children[5].children[0].infoset)

# Set the information sets for Bob's decisions after Alice bets
g.set_infoset(g.root.children[0].children[1], g.root.children[1].children[1].infoset)
g.set_infoset(g.root.children[2].children[1], g.root.children[3].children[1].infoset)
g.set_infoset(g.root.children[4].children[1], g.root.children[5].children[1].infoset)

# Set the information sets for Alice's decisions after Bob bets
g.set_infoset(g.root.children[0].children[0].children[1], g.root.children[1].children[0].children[1].infoset)
g.set_infoset(g.root.children[2].children[0].children[1], g.root.children[3].children[0].children[1].infoset)
g.set_infoset(g.root.children[4].children[0].children[1], g.root.children[5].children[0].children[1].infoset)

# Define outcomes for the game
alice_wins_1 = g.add_outcome([1, -1], label="Alice wins 1")
bob_wins_1 = g.add_outcome([-1, 1], label="Bob wins 1")
alice_wins_2 = g.add_outcome([2, -2], label="Alice wins 2")
bob_wins_2 = g.add_outcome([-2, 2], label="Bob wins 2")

# Set outcomes for each terminal node
# If Bob checks after Alice checks, the higher card wins 1
g.set_outcome(g.root.children[0].children[0].children[0], bob_wins_1)
g.set_outcome(g.root.children[1].children[0].children[0], alice_wins_1)
g.set_outcome(g.root.children[2].children[0].children[0], alice_wins_1)
g.set_outcome(g.root.children[3].children[0].children[0], bob_wins_1)
g.set_outcome(g.root.children[4].children[0].children[0], bob_wins_1)
g.set_outcome(g.root.children[5].children[0].children[0], alice_wins_1)

# If Alice folds after Bob bets, Bob wins 1
g.set_outcome(g.root.children[0].children[0].children[1].children[0], bob_wins_1)
g.set_outcome(g.root.children[1].children[0].children[1].children[0], bob_wins_1)
g.set_outcome(g.root.children[2].children[0].children[1].children[0], bob_wins_1)
g.set_outcome(g.root.children[3].children[0].children[1].children[0], bob_wins_1)
g.set_outcome(g.root.children[4].children[0].children[1].children[0], bob_wins_1)
g.set_outcome(g.root.children[5].children[0].children[1].children[0], bob_wins_1)

# If Alice calls after Bob bets, the higher card wins 2
g.set_outcome(g.root.children[0].children[0].children[1].children[1], bob_wins_2)
g.set_outcome(g.root.children[1].children[0].children[1].children[1], alice_wins_2)
g.set_outcome(g.root.children[2].children[0].children[1].children[1], alice_wins_2)
g.set_outcome(g.root.children[3].children[0].children[1].children[1], bob_wins_2)
g.set_outcome(g.root.children[4].children[0].children[1].children[1], bob_wins_2)
g.set_outcome(g.root.children[5].children[0].children[1].children[1], alice_wins_2)

# If Bob folds after Alice bets, Alice wins 1
g.set_outcome(g.root.children[0].children[1].children[0], alice_wins_1)
g.set_outcome(g.root.children[1].children[1].children[0], alice_wins_1)
g.set_outcome(g.root.children[2].children[1].children[0], alice_wins_1)
g.set_outcome(g.root.children[3].children[1].children[0], alice_wins_1)
g.set_outcome(g.root.children[4].children[1].children[0], alice_wins_1)
g.set_outcome(g.root.children[5].children[1].children[0], alice_wins_1)

# If Bob calls after Alice bets, the higher card wins 2
g.set_outcome(g.root.children[0].children[1].children[1], bob_wins_2)
g.set_outcome(g.root.children[1].children[1].children[1], alice_wins_2)
g.set_outcome(g.root.children[2].children[1].children[1], alice_wins_2)
g.set_outcome(g.root.children[3].children[1].children[1], bob_wins_2)
g.set_outcome(g.root.children[4].children[1].children[1], bob_wins_2)
g.set_outcome(g.root.children[5].children[1].children[1], alice_wins_2)

# Save the EFG
efg = g.write(format='native')
```