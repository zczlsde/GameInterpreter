```python
import pygambit as gbt

# Create a new extensive-form game with two players: Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Three-card poker game")

# Step 1: Set up the chance node for card allocation
# There are six possible allocations of the cards: JQ, JK, QJ, QK, KJ, and KQ
g.append_move(g.root, g.players.chance, ["JQ", "JK", "QJ", "QK", "KJ", "KQ"])

# Set the probabilities for each allocation to 1/6
g.set_chance_probs(g.root.infoset, [gbt.Rational(1, 6)] * 6)

# Step 2: Define Alice's move for each card allocation
# Alice can either Check or Bet
for node in g.root.children:
    g.append_move(node, "Alice", ["Check", "Bet"])

# Step 3: Define Bob's move if Alice checks
# Bob can either Check or Bet
for node in g.root.children:
    g.append_move(node.children[0], "Bob", ["Check", "Bet"])

# Step 4: Define Alice's response if Bob bets after Alice checks
# Alice can either Fold or Call
for node in g.root.children:
    g.append_move(node.children[0].children[1], "Alice", ["Fold", "Call"])

# Step 5: Define Bob's response if Alice bets
# Bob can either Fold or Call
for node in g.root.children:
    g.append_move(node.children[1], "Bob", ["Fold", "Call"])

# Step 6: Set information sets for imperfect information
# Alice and Bob do not know the allocation of the chance node
# Bob does not know Alice's card when making decisions
# Alice does not know Bob's card when making decisions

# Set information sets for Bob's decision after Alice checks
g.set_infoset(g.root.children[0].children[0], g.root.children[1].children[0].infoset)
g.set_infoset(g.root.children[2].children[0], g.root.children[1].children[0].infoset)
g.set_infoset(g.root.children[3].children[0], g.root.children[1].children[0].infoset)
g.set_infoset(g.root.children[4].children[0], g.root.children[1].children[0].infoset)
g.set_infoset(g.root.children[5].children[0], g.root.children[1].children[0].infoset)

# Set information sets for Alice's decision after Bob bets
g.set_infoset(g.root.children[0].children[0].children[1], g.root.children[1].children[0].children[1].infoset)
g.set_infoset(g.root.children[2].children[0].children[1], g.root.children[1].children[0].children[1].infoset)
g.set_infoset(g.root.children[3].children[0].children[1], g.root.children[1].children[0].children[1].infoset)
g.set_infoset(g.root.children[4].children[0].children[1], g.root.children[1].children[0].children[1].infoset)
g.set_infoset(g.root.children[5].children[0].children[1], g.root.children[1].children[0].children[1].infoset)

# Set information sets for Bob's decision after Alice bets
g.set_infoset(g.root.children[0].children[1], g.root.children[1].children[1].infoset)
g.set_infoset(g.root.children[2].children[1], g.root.children[1].children[1].infoset)
g.set_infoset(g.root.children[3].children[1], g.root.children[1].children[1].infoset)
g.set_infoset(g.root.children[4].children[1], g.root.children[1].children[1].infoset)
g.set_infoset(g.root.children[5].children[1], g.root.children[1].children[1].infoset)

# Step 7: Set outcomes for each terminal node
# Outcomes depend on the card values and actions taken

# Define outcomes
alice_wins_1 = g.add_outcome([1, -1], label="Alice wins 1")
bob_wins_1 = g.add_outcome([-1, 1], label="Bob wins 1")
alice_wins_2 = g.add_outcome([2, -2], label="Alice wins 2")
bob_wins_2 = g.add_outcome([-2, 2], label="Bob wins 2")

# Set outcomes for each terminal node
# Alice checks, Bob checks
g.set_outcome(g.root.children[0].children[0].children[0], bob_wins_1)  # JQ
g.set_outcome(g.root.children[1].children[0].children[0], alice_wins_1)  # JK
g.set_outcome(g.root.children[2].children[0].children[0], alice_wins_1)  # QJ
g.set_outcome(g.root.children[3].children[0].children[0], bob_wins_1)  # QK
g.set_outcome(g.root.children[4].children[0].children[0], bob_wins_1)  # KJ
g.set_outcome(g.root.children[5].children[0].children[0], alice_wins_1)  # KQ

# Alice checks, Bob bets, Alice folds
g.set_outcome(g.root.children[0].children[0].children[1].children[0], bob_wins_1)  # JQ
g.set_outcome(g.root.children[1].children[0].children[1].children[0], bob_wins_1)  # JK
g.set_outcome(g.root.children[2].children[0].children[1].children[0], bob_wins_1)  # QJ
g.set_outcome(g.root.children[3].children[0].children[1].children[0], bob_wins_1)  # QK
g.set_outcome(g.root.children[4].children[0].children[1].children[0], bob_wins_1)  # KJ
g.set_outcome(g.root.children[5].children[0].children[1].children[0], bob_wins_1)  # KQ

# Alice checks, Bob bets, Alice calls
g.set_outcome(g.root.children[0].children[0].children[1].children[1], bob_wins_2)  # JQ
g.set_outcome(g.root.children[1].children[0].children[1].children[1], alice_wins_2)  # JK
g.set_outcome(g.root.children[2].children[0].children[1].children[1], alice_wins_2)  # QJ
g.set_outcome(g.root.children[3].children[0].children[1].children[1], bob_wins_2)  # QK
g.set_outcome(g.root.children[4].children[0].children[1].children[1], bob_wins_2)  # KJ
g.set_outcome(g.root.children[5].children[0].children[1].children[1], alice_wins_2)  # KQ

# Alice bets, Bob folds
g.set_outcome(g.root.children[0].children[1].children[0], alice_wins_1)  # JQ
g.set_outcome(g.root.children[1].children[1].children[0], alice_wins_1)  # JK
g.set_outcome(g.root.children[2].children[1].children[0], alice_wins_1)  # QJ
g.set_outcome(g.root.children[3].children[1].children[0], alice_wins_1)  # QK
g.set_outcome(g.root.children[4].children[1].children[0], alice_wins_1)  # KJ
g.set_outcome(g.root.children[5].children[1].children[0], alice_wins_1)  # KQ

# Alice bets, Bob calls
g.set_outcome(g.root.children[0].children[1].children[1], bob_wins_2)  # JQ
g.set_outcome(g.root.children[1].children[1].children[1], alice_wins_2)  # JK
g.set_outcome(g.root.children[2].children[1].children[1], alice_wins_2)  # QJ
g.set_outcome(g.root.children[3].children[1].children[1], bob_wins_2)  # QK
g.set_outcome(g.root.children[4].children[1].children[1], bob_wins_2)  # KJ
g.set_outcome(g.root.children[5].children[1].children[1], alice_wins_2)  # KQ

# Save the EFG
efg = g.write(format='native')
```