```python
import pygambit as gbt

# Create a new game with two players: Country A and Country B
g = gbt.Game.new_tree(players=["Country A", "Country B"], title="Diplomatic Strategy Game")

# Country B decides to either "Accept" the status quo or "Rebel"
g.append_move(g.root, "Country B", ["Accept", "Rebel"])

# If Country B accepts, Country A decides whether to "Tax" or "Drop Taxes"
g.append_move(g.root.children[0], "Country A", ["Tax", "Drop Taxes"])
# Set outcomes for Country A's decision if Country B accepts
g.set_outcome(g.root.children[0].children[0], g.add_outcome([6, -2], label="Tax"))
g.set_outcome(g.root.children[0].children[1], g.add_outcome([4, 0], label="Drop Taxes"))

# If Country B rebels, Country A faces a choice to either "Grant Independence" or attempt to "Suppress" the rebellion
g.append_move(g.root.children[1], "Country A", ["Grant Independence", "Suppress"])
# Set outcomes for granting independence
g.set_outcome(g.root.children[1].children[0], g.add_outcome([0, 3], label="Grant Independence"))

# For the "Suppress" option, the outcome is determined by chance, so we add a chance node
g.append_move(g.root.children[1].children[1], g.players.chance, ["B Wins", "B Loses"])
# Set the probabilities for the outcomes of the war
g.set_chance_probs(g.root.children[1].children[1].infoset, [gbt.Rational(3, 10), gbt.Rational(7, 10)])
# Set outcomes for the war
g.set_outcome(g.root.children[1].children[1].children[0], g.add_outcome([-1, -3], label="B Wins War"))
g.set_outcome(g.root.children[1].children[1].children[1], g.add_outcome([-1, -5], label="B Loses War"))

# Save the EFG
efg = g.write(format='native')
```

This code snippet constructs an extensive-form game representing the strategic interactions between Country A and Country B, including decisions on accepting or rebelling against a status quo, taxing, granting independence, and the outcomes of potential conflict. The game tree is built step by step, reflecting the sequential nature of the decisions and the probabilistic outcome of the war.