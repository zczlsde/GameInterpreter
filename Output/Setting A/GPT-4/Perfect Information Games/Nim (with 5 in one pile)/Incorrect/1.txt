```python
import pygambit as gbt

# Create a new game with two players: Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Avoid the Last Stone")

# Alice starts the game and can choose to remove one or two stones.
g.append_move(g.root, "Alice", ["Remove 1", "Remove 2"])

# If Alice removes one stone, Bob can also remove one or two stones.
g.append_move(g.root.children[0], "Bob", ["Remove 1", "Remove 2"])

# If Bob removes one stone, Alice can again choose to remove one or two stones.
g.append_move(g.root.children[0].children[0], "Alice", ["Remove 1", "Remove 2"])

# If Alice removes one stone, Bob has the choice to remove one or two stones.
g.append_move(g.root.children[0].children[0].children[0], "Bob", ["Remove 1", "Remove 2"])

# Outcomes for the game when Alice starts by removing one stone, then Bob removes one, and Alice removes one
# If Bob removes one stone, Alice can remove one stone, which would result in Alice losing the game.
g.set_outcome(g.root.children[0].children[0].children[0].children[0], g.add_outcome([-1, 1], label="Alice loses"))
# If Bob removes two stones, Bob loses the game.
g.set_outcome(g.root.children[0].children[0].children[0].children[1], g.add_outcome([1, -1], label="Bob loses"))

# If Alice removes two stones, Bob can remove one stone, leading to Bob's loss.
g.set_outcome(g.root.children[0].children[0].children[1], g.add_outcome([1, -1], label="Bob loses"))

# If Bob removes two stones, Alice can remove one or two stones.
g.append_move(g.root.children[0].children[1], "Alice", ["Remove 1", "Remove 2"])

# If Alice removes one stone, Bob can remove one stone, leading to Bob's loss.
g.set_outcome(g.root.children[0].children[1].children[0], g.add_outcome([1, -1], label="Bob loses"))
# If Alice removes two stones, Alice loses the game.
g.set_outcome(g.root.children[0].children[1].children[1], g.add_outcome([-1, 1], label="Alice loses"))

# If Alice removes two stones, Bob has the option to remove one or two stones.
g.append_move(g.root.children[1], "Bob", ["Remove 1", "Remove 2"])

# If Bob removes one stone, Alice can remove one or two stones.
g.append_move(g.root.children[1].children[0], "Alice", ["Remove 1", "Remove 2"])

# If Alice removes one stone, Bob can remove one stone, leading to Bob's loss.
g.set_outcome(g.root.children[1].children[0].children[0], g.add_outcome([1, -1], label="Bob loses"))
# If Alice removes two stones, Alice loses the game.
g.set_outcome(g.root.children[1].children[0].children[1], g.add_outcome([-1, 1], label="Alice loses"))

# If Bob removes two stones, Alice has only one stone left and loses.
g.set_outcome(g.root.children[1].children[1], g.add_outcome([-1, 1], label="Alice loses"))

# Save the EFG
efg = g.write(format='native')
```

This code constructs an extensive-form game representation of the "Avoid the Last Stone" game using the pygambit library. The game tree is built step by step, reflecting each player's choices and the resulting outcomes. The outcomes are set based on the game's rules, where the goal is to avoid taking the last stone. The payoffs are assigned with the winner receiving one point and the loser losing one point.