```python
import pygambit as gbt

# Create a new game with two players, Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Three Card Game")

# Append a chance move at the root for the six possible allocations of cards (JQ, JK, QJ, QK, KJ, KQ)
# Each allocation has a probability of 1/6
g.append_move(g.root, g.players.chance, ["JQ", "JK", "QJ", "QK", "KJ", "KQ"])
g.set_chance_probs(g.root.infoset, [gbt.Rational(1, 6) for _ in range(6)])

# For each allocation, append moves for Alice (check or bet)
for allocation_node in g.root.children:
    g.append_move(allocation_node, "Alice", ["Check", "Bet"])

# For each of Alice's actions, append moves for Bob
for allocation_node in g.root.children:
    # If Alice checks
    alice_check_node = allocation_node.children[0]
    g.append_move(alice_check_node, "Bob", ["Check", "Bet"])
    
    # If Bob checks after Alice checks, the game ends with higher card winning 1
    # If Bob bets after Alice checks, Alice can fold or call
    alice_fold_call_node = alice_check_node.children[1]
    g.append_move(alice_fold_call_node, "Alice", ["Fold", "Call"])
    
    # If Alice bets
    alice_bet_node = allocation_node.children[1]
    g.append_move(alice_bet_node, "Bob", ["Fold", "Call"])

# Define outcomes based on the higher card winning, considering the actions taken
# Since the game's outcomes depend on the specific cards held, which are not detailed in this code,
# we will use placeholders for the outcomes. In a complete implementation, you would calculate
# the outcomes based on the specific cards in each allocation.

# Placeholder outcomes for when the game ends after checks or calls
higher_card_wins_1 = g.add_outcome([1, -1], label="Higher card wins 1")
higher_card_wins_2 = g.add_outcome([2, -2], label="Higher card wins 2")

# Placeholder outcomes for when Alice or Bob wins by the other folding
alice_wins_3 = g.add_outcome([3, -3], label="Alice wins 3")
bob_wins_3 = g.add_outcome([-3, 3], label="Bob wins 3")

# Assign outcomes to terminal nodes
for allocation_node in g.root.children:
    # If Alice checks and Bob checks
    g.set_outcome(allocation_node.children[0].children[0], higher_card_wins_1)
    
    # If Alice checks, Bob bets, Alice folds
    g.set_outcome(allocation_node.children[0].children[1].children[0], bob_wins_3)
    
    # If Alice checks, Bob bets, Alice calls
    g.set_outcome(allocation_node.children[0].children[1].children[1], higher_card_wins_2)
    
    # If Alice bets and Bob folds
    g.set_outcome(allocation_node.children[1].children[0], alice_wins_3)
    
    # If Alice bets and Bob calls
    g.set_outcome(allocation_node.children[1].children[1], higher_card_wins_2)

# Note: The actual calculation of outcomes based on the cards would require additional logic
# to compare the cards and assign the correct payoffs.

# Save the EFG
efg = g.write(format='native')
```

This code outlines the structure for the three-card game described, including the chance node for card allocation, Alice's and Bob's decisions, and placeholders for outcomes. Actual outcome calculations based on card comparisons would require additional logic not included here.