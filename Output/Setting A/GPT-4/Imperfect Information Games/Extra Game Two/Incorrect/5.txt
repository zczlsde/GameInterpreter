```python
import pygambit as gbt

# Initialize the game with three players
g = gbt.Game.new_tree(players=["Player 1", "Player 2", "Player 3"],
                      title="Sequential game with imperfect information")

# First stage: Player 1 chooses among A, B, and C
g.append_move(g.root, "Player 1", ["A", "B", "C"])

# Second stage: Player 2 chooses between D and E without knowing Player 1's choice
# Since Player 2's decision is made without knowing Player 1's choice, we have an imperfect information set here.
# We create moves for each of Player 1's actions leading to Player 2's decision.
for node in g.root.children:
    g.append_move(node, "Player 2", ["D", "E"])

# Third stage: Player 1 chooses between F and G, again without knowing Player 2's choice
# This implies another layer of imperfect information, where Player 1's choice in the third stage
# does not depend on the knowledge of Player 2's previous choice.
for node in g.root.children:
    for child in node.children:
        g.append_move(child, "Player 1", ["F", "G"])

# Fourth stage: Player 3 decides between Q and W
# At this point, Player 3's decision is the final action in the game, leading to the outcomes.
for node in g.root.children:
    for child in node.children:
        for grandchild in child.children:
            g.append_move(grandchild, "Player 3", ["Q", "W"])

# Setting outcomes based on Player 3's choices
# If Player 3 selects Q, all players receive a payoff of 3.
# If Player 3 selects W, Player 1 and Player 2 each receive a payoff of 2, while Player 3 gets 3.
for node in g.root.children:
    for child in node.children:
        for grandchild in child.children:
            g.set_outcome(grandchild.children[0], g.add_outcome([3, 3, 3], label="All choose Q"))
            g.set_outcome(grandchild.children[1], g.add_outcome([2, 2, 3], label="P1 and P2 choose W, P3 gets 3"))

# Handling imperfect information
# Player 2 makes a choice without knowing Player 1's action, and Player 1 makes another choice without knowing Player 2's action.
# This requires setting up information sets properly to reflect the imperfect information structure.
# Since the moves of Player 2 and the second move of Player 1 are made without perfect information, we group these moves into information sets.
# For Player 2's moves:
for i in range(3):
    g.set_infoset(g.root.children[i].children[0], g.root.children[0].children[0].infoset)
    g.set_infoset(g.root.children[i].children[1], g.root.children[0].children[1].infoset)

# For Player 1's second move:
for i in range(3):
    for j in range(2):
        g.set_infoset(g.root.children[i].children[j].children[0], g.root.children[0].children[0].children[0].infoset)
        g.set_infoset(g.root.children[i].children[j].children[1], g.root.children[0].children[0].children[1].infoset)

# Save the EFG
efg = g.write(format='native')
```

This code snippet constructs an extensive-form game with imperfect information using the pygambit library. The game involves three players making sequential decisions with the presence of imperfect information for Player 2 and Player 1's second move. The information sets are carefully set up to reflect the game's structure where certain decisions are made without perfect knowledge of previous actions.