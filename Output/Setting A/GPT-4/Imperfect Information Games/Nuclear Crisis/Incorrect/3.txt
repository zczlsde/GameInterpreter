```python
import pygambit as gbt

# Initialize the game with two players, Country A and Country B
g = gbt.Game.new_tree(players=["Country A", "Country B"], title="Nuclear Crisis Game")

# Country A decides to either escalate (E) or ignore (I) the provocation
g.append_move(g.root, "Country A", ["Escalate", "Ignore"])

# If Country A ignores, the game ends with both countries receiving a small positive payoff
g.set_outcome(g.root.children[1], g.add_outcome([1, 1], label="Mutual Peace"))

# If Country A escalates, Country B has to decide to back down (B) or escalate further (E)
g.append_move(g.root.children[0], "Country B", ["Back Down", "Escalate Further"])

# If Country B backs down, Country A gains a small payoff while Country B loses a small payoff
g.set_outcome(g.root.children[0].children[0], g.add_outcome([2, -1], label="Country B Backs Down"))

# If both escalate, leading to a nuclear crisis, Country A decides between retreating (R) and detonating (D)
g.append_move(g.root.children[0].children[1], "Country A", ["Retreat", "Detonate"])

# For each of Country A's decisions, Country B, unaware of Country Aâ€™s decision, decides to retreat or detonate
# This creates a situation of imperfect information for Country B
for node in g.root.children[0].children[1].children:
    g.append_move(node, "Country B", ["Retreat", "Detonate"])

# Since Country B's decision is made without knowledge of Country A's action, we group these decisions in the same information set
# Using the identical code for handling imperfect information as specified
g.set_infoset(g.root.children[0].children[1].children[0], g.root.children[0].children[1].children[1].infoset)

# Setting outcomes based on the combinations of decisions in the nuclear crisis
# If one retreats and the other detonates, the detonating country gains a large positive payoff, while the retreating country incurs a large negative payoff
g.set_outcome(g.root.children[0].children[1].children[0].children[0], g.add_outcome([-5, 5], label="A Retreats, B Detonates"))
g.set_outcome(g.root.children[0].children[1].children[0].children[1], g.add_outcome([-10, -10], label="Mutual Detonation"))
g.set_outcome(g.root.children[0].children[1].children[1].children[0], g.add_outcome([5, -5], label="A Detonates, B Retreats"))
g.set_outcome(g.root.children[0].children[1].children[1].children[1], g.add_outcome([-10, -10], label="Mutual Detonation"))

# If both countries retreat, they each suffer a small negative payoff
g.set_outcome(g.root.children[0].children[1].children[0].children[0], g.add_outcome([-2, -2], label="Mutual Retreat"))

# Save the EFG
efg = g.write(format='native')
```

This code snippet constructs an extensive-form game representing a nuclear crisis scenario between two countries, Country A and Country B, using the pygambit library. The game includes decisions on escalating or ignoring a provocation, further escalation, and choices in a nuclear crisis, with outcomes reflecting the consequences of these decisions. Imperfect information is modeled by grouping Country B's decisions in the same information set when responding to Country A's action in the nuclear crisis phase.