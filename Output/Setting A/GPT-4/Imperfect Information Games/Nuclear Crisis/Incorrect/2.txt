```python
import pygambit as gbt

# Initialize the game with two players: Country A and Country B
g = gbt.Game.new_tree(players=["Country A", "Country B"], title="Crisis Escalation Game")

# Country A decides to either escalate (E) the situation or ignore it (I)
g.append_move(g.root, "Country A", ["E", "I"])

# If Country A ignores, the game ends with both countries receiving a small positive payoff
g.set_outcome(g.root.children[1], g.add_outcome([1, 1], label="Ignore"))

# If Country A escalates, Country B then decides to back down (B) or escalate further (E)
g.append_move(g.root.children[0], "Country B", ["B", "E"])

# If Country B backs down, it incurs a small payoff loss while Country A gains
g.set_outcome(g.root.children[0].children[0], g.add_outcome([2, -1], label="Back Down"))

# If Country B escalates further, leading to a nuclear crisis
# Country A decides between retreating (R) and detonating (D)
g.append_move(g.root.children[0].children[1], "Country A", ["R", "D"])

# For each of Country A's decisions, Country B, unaware of Country Aâ€™s decision, decides to retreat (R) or detonate (D)
# This creates a situation of imperfect information, so we use information sets
for node in g.root.children[0].children[1].children:
    g.append_move(node, "Country B", ["R", "D"])

# Since Country B's decision is made without knowing Country A's action, both nodes belong to the same information set
# Using the identical code to handle the imperfect information
g.set_infoset(g.root.children[0].children[1].children[0], g.root.children[0].children[1].children[1].infoset)

# Setting outcomes based on the final decisions
# If one country detonates while the other retreats, the detonating country gains, the retreating country loses
g.set_outcome(g.root.children[0].children[1].children[0].children[0], g.add_outcome([-2, -2], label="Mutual Retreat"))
g.set_outcome(g.root.children[0].children[1].children[0].children[1], g.add_outcome([5, -5], label="A Detonates, B Retreats"))
g.set_outcome(g.root.children[0].children[1].children[1].children[0], g.add_outcome([-5, 5], label="B Detonates, A Retreats"))
# If neither retreats, catastrophic nuclear disaster
g.set_outcome(g.root.children[0].children[1].children[1].children[1], g.add_outcome([-10, -10], label="Mutual Detonation"))

# Save the EFG
efg = g.write(format='native')
```

This code constructs an extensive-form game representing a crisis escalation scenario between two countries, Country A and Country B. The game starts with Country A's decision to either escalate or ignore a provocation. Depending on the sequence of decisions, the game can end in various states, including mutual retreat, one side detonating while the other retreats, or mutual detonation, each with corresponding payoffs. The use of information sets captures the imperfect information aspect of Country B's decision-making after Country A decides to potentially detonate.