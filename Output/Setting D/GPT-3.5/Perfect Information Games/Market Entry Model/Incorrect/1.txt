```python
# Import the pygambit library
import pygambit as gbt

# Create a new game tree with two players, Player 1 and Player 2
g = gbt.Game.new_tree(players=["Player 1", "Player 2"],
                    title="Imperfect Information Game")

# Add a chance node at the root with four possible outcomes: A, B, C, D
g.append_move(g.root, g.players.chance, ["A", "B", "C", "D"])

# Add decision nodes for Player 1 after the chance node
for node in g.root.children:
    g.append_move(node, "Player 1", ["E", "F", "G"])

# Add decision nodes for Player 2 after Player 1's decision nodes
for node in g.root.children[0].children:
    g.append_move(node, "Player 2", ["Q", "W"])

# Set the information set for Player 1's decision nodes based on the imperfect information
# Group the decision nodes for Player 1 based on the outcomes of the chance node
# Nodes under A: E, F, G
# Nodes under B: E, F, G
# Nodes under C: E, F, G
# Nodes under D: E, F, G
g.set_infoset(g.root.children[0].children[0], g.root.children[1].children[0].infoset)
g.set_infoset(g.root.children[0].children[1], g.root.children[1].children[1].infoset)
g.set_infoset(g.root.children[0].children[2], g.root.children[1].children[2].infoset)
g.set_infoset(g.root.children[1].children[0], g.root.children[1].children[0].infoset)
g.set_infoset(g.root.children[1].children[1], g.root.children[1].children[1].infoset)
g.set_infoset(g.root.children[1].children[2], g.root.children[1].children[2].infoset)

```

```python
# Import the pygambit library
import pygambit as gbt

# Create a new game tree with two players, Player 1 and Player 2
g = gbt.Game.new_tree(players=["Player 1", "Player 2"],
                    title="Imperfect Information Game")

# Add a chance node at the root with four possible outcomes: A, B, C, D
g.append_move(g.root, g.players.chance, ["A", "B", "C", "D"])

# Add decision nodes for Player 1 after the chance node
g.append_move(g.root, "Player 1", ["E", "F", "G"])

# Add decision nodes for Player 2 after Player 1's decision nodes
g.append_move(g.root.children[0], "Player 2", ["Q", "W"])

# Set the information set for Player 1's decision nodes based on the imperfect information
# Group the decision nodes for Player 1 based on the outcomes of the chance node
# Nodes under A: E, F, G
# Nodes under B: E, F, G
# Nodes under C: E, F, G
# Nodes under D: E, F, G
g.set_infoset(g.root.children[0], g.root.children[0].infoset)
g.set_infoset(g.root.children[0].children[0], g.root.children[0].children[0].infoset)
g.set_infoset(g.root.children[0].children[1], g.root.children[0].children[1].infoset)
g.set_infoset(g.root.children[0].children[2], g.root.children[0].children[2].infoset)

# Set the payoffs for each combination of actions
outcome_A_Q = g.add_outcome([1, -1], label="A_Q")
outcome_A_W = g.add_outcome([2, -2], label="A_W")
outcome_B_Q = g.add_outcome([3, -3], label="B_Q")
outcome_B_W = g.add_outcome([-3, 3], label="B_W")
outcome_C_Q = g.add_outcome([0, 0], label="C_Q")
outcome_C_W = g.add_outcome([-1, 1], label="C_W")
outcome_D_Q = g.add_outcome([4, -4], label="D_Q")
outcome_D_W = g.add_outcome([-4, 4], label="D_W")

# Set the outcomes for each combination of actions
g.set_outcome(g.root.children[0].children[0].children[0], outcome_A_Q)
g.set_outcome(g.root.children[0].children[0].children[1], outcome_A_W)
g.set_outcome(g.root.children[0].children[1].children[0], outcome_B_Q)
g.set_outcome(g.root.children[0].children[1].children[1], outcome_B_W)
g.set_outcome(g.root.children[0].children[2].children[0], outcome_C_Q)
g.set_outcome(g.root.children[0].children[2].children[1], outcome_C_W)
g.set_outcome(g.root.children[0].children[3].children[0], outcome_D_Q)
g.set_outcome(g.root.children[0].children[3].children[1], outcome_D_W)

# Save the EFG
efg = g.write(format='native')
```
===================
append_move(): `nodes` must be terminal nodes
Error in code generation. Trying again...

# Import the pygambit library
import pygambit as gbt

# Create a new game tree with two players, Player 1 and Player 2
g = gbt.Game.new_tree(players=["Player 1", "Player 2"],
                    title="Imperfect Information Game")

# Add a chance node at the root with four possible outcomes: A, B, C, D
g.append_move(g.root, g.players.chance, ["A", "B", "C", "D"])

# Add decision nodes for Player 1 after the chance node
g.append_move(g.root.children[0], "Player 1", ["E", "F", "G"])

# Add decision nodes for Player 2 after Player 1's decision nodes
g.append_move(g.root.children[0].children[0], "Player 2", ["Q", "W"])
g.append_move(g.root.children[0].children[1], "Player 2", ["Q", "W"])
g.append_move(g.root.children[0].children[2], "Player 2", ["Q", "W"])
g.append_move(g.root.children[0].children[3], "Player 2", ["Q", "W"])

# Set the information set for Player 1's decision nodes based on the imperfect information
# Group the decision nodes for Player 1 based on the outcomes of the chance node
# Nodes under A: E, F, G
# Nodes under B: E, F, G
# Nodes under C: E, F, G
# Nodes under D: E, F, G
g.set_infoset(g.root.children[0], g.root.children[0].infoset)
g.set_infoset(g.root.children[0].children[0], g.root.children[0].children[0].infoset)
g.set_infoset(g.root.children[0].children[1], g.root.children[0].children[1].infoset)
g.set_infoset(g.root.children[0].children[2], g.root.children[0].children[2].infoset)
g.set_infoset(g.root.children[0].children[3], g.root.children[0].children[3].infoset)

# Set the payoffs for each combination of actions
outcome_A_Q = g.add_outcome([1, -1], label="A_Q")
outcome_A_W = g.add_outcome([2, -2], label="A_W")
outcome_B_Q = g.add_outcome([3, -3], label="B_Q")
outcome_B_W = g.add_outcome([-3, 3], label="B_W")
outcome_C_Q = g.add_outcome([0, 0], label="C_Q")
outcome_C_W = g.add_outcome([-1, 1], label="C_W")
outcome_D_Q = g.add_outcome([4, -4], label="D_Q")
outcome_D_W = g.add_outcome([-4, 4], label="D_W")

# Set the outcomes for each combination of actions
g.set_outcome(g.root.children[0].children[0].children[0], outcome_A_Q)
g.set_outcome(g.root.children[0].children[0].children[1], outcome_A_W)
g.set_outcome(g.root.children[0].children[1].children[0], outcome_B_Q)
g.set_outcome(g.root.children[0].children[1].children[1], outcome_B_W)
g.set_outcome(g.root.children[0].children[2].children[0], outcome_C_Q)
g.set_outcome(g.root.children[0].children[2].children[1], outcome_C_W)
g.set_outcome(g.root.children[0].children[3].children[0], outcome_D_Q)
g.set_outcome(g.root.children[0].children[3].children[1], outcome_D_W)

# Save the EFG
efg = g.write(format='native')

===================
Index out of range
Error in code generation. Trying again...

# Import the pygambit library
import pygambit as gbt

# Create a new game tree with two players, Player 1 and Player 2
g = gbt.Game.new_tree(players=["Player 1", "Player 2"],
                    title="Imperfect Information Game")

# Add a chance node at the root with four possible outcomes: A, B, C, D
g.append_move(g.root, g.players.chance, ["A", "B", "C", "D"])

# Add decision nodes for Player 1 after the chance node
g.append_move(g.root.children[0], "Player 1", ["E", "F", "G"])

# Add decision nodes for Player 2 after Player 1's decision nodes
for node in g.root.children[0].children:
    g.append_move(node, "Player 2", ["Q", "W"])

# Set the information set for Player 1's decision nodes based on the imperfect information
# Group the decision nodes for Player 1 based on the outcomes of the chance node
# Nodes under A: E, F, G
# Nodes under B: E, F, G
# Nodes under C: E, F, G
# Nodes under D: E, F, G
g.set_infoset(g.root.children[0], g.root.children[0].infoset)
g.set_infoset(g.root.children[0].children[0], g.root.children[0].children[0].infoset)
g.set_infoset(g.root.children[0].children[1], g.root.children[0].children[1].infoset)
g.set_infoset(g.root.children[0].children[2], g.root.children[0].children[2].infoset)
g.set_infoset(g.root.children[0].children[3], g.root.children[0].children[3].infoset)

# Set the payoffs for each combination of actions
outcome_A_Q = g.add_outcome([1, -1], label="A_Q")
outcome_A_W = g.add_outcome([2, -2], label="A_W")
outcome_B_Q = g.add_outcome([3, -3], label="B_Q")
outcome_B_W = g.add_outcome([-3, 3], label="B_W")
outcome_C_Q = g.add_outcome([0, 0], label="C_Q")
outcome_C_W = g.add_outcome([-1, 1], label="C_W")
outcome_D_Q = g.add_outcome([4, -4], label="D_Q")
outcome_D_W = g.add_outcome([-4, 4], label="D_W")

# Set the outcomes for each combination of actions
g.set_outcome(g.root.children[0].children[0].children[0], outcome_A_Q)
g.set_outcome(g.root.children[0].children[0].children[1], outcome_A_W)
g.set_outcome(g.root.children[0].children[1].children[0], outcome_B_Q)
g.set_outcome(g.root.children[0].children[1].children[1], outcome_B_W)
g.set_outcome(g.root.children[0].children[2].children[0], outcome_C_Q)
g.set_outcome(g.root.children[0].children[2].children[1], outcome_C_W)
g.set_outcome(g.root.children[0].children[3].children[0], outcome_D_Q)
g.set_outcome(g.root.children[0].children[3].children[1], outcome_D_W)

# Save the EFG
efg = g.write(format='native')

===================
Index out of range
Error in code generation. Trying again...

# Import the pygambit library
import pygambit as gbt

# Create a new game tree with two players, Player 1 and Player 2
g = gbt.Game.new_tree(players=["Player 1", "Player 2"],
                    title="Imperfect Information Game")

# Add a chance node at the root with four possible outcomes: A, B, C, D
g.append_move(g.root, g.players.chance, ["A", "B", "C", "D"])

# Add decision nodes for Player 1 after the chance node
g.append_move(g.root.children[0], "Player 1", ["E", "F", "G"])

# Add decision nodes for Player 2 after Player 1's decision nodes
for node in g.root.children[0].children:
    g.append_move(node, "Player 2", ["Q", "W"])

# Set the information set for Player 1's decision nodes based on the imperfect information
# Group the decision nodes for Player 1 based on the outcomes of the chance node
# Nodes under A: E, F, G
# Nodes under B: E, F, G
# Nodes under C: E, F, G
# Nodes under D: E, F, G
g.set_infoset(g.root.children[0], g.root.children[0].infoset)
g.set_infoset(g.root.children[0].children[0], g.root.children[0].children[0].infoset)
g.set_infoset(g.root.children[0].children[1], g.root.children[0].children[1].infoset)
g.set_infoset(g.root.children[0].children[2], g.root.children[0].children[2].infoset)
g.set_infoset(g.root.children[0].children[3], g.root.children[0].children[3].infoset)

# Set the payoffs for each combination of actions
outcome_A_Q = g.add_outcome([1, -1], label="A_Q")
outcome_A_W = g.add_outcome([2, -2], label="A_W")
outcome_B_Q = g.add_outcome([3, -3], label="B_Q")
outcome_B_W = g.add_outcome([-3, 3], label="B_W")
outcome_C_Q = g.add_outcome([0, 0], label="C_Q")
outcome_C_W = g.add_outcome([-1, 1], label="C_W")
outcome_D_Q = g.add_outcome([4, -4], label="D_Q")
outcome_D_W = g.add_outcome([-4, 4], label="D_W")

# Set the outcomes for each combination of actions
g.set_outcome(g.root.children[0].children[0].children[0], outcome_A_Q)
g.set_outcome(g.root.children[0].children[0].children[1], outcome_A_W)
g.set_outcome(g.root.children[0].children[1].children[0], outcome_B_Q)
g.set_outcome(g.root.children[0].children[1].children[1], outcome_B_W)
g.set_outcome(g.root.children[0].children[2].children[0], outcome_C_Q)
g.set_outcome(g.root.children[0].children[2].children[1], outcome_C_W)
g.set_outcome(g.root.children[0].children[3].children[0], outcome_D_Q)
g.set_outcome(g.root.children[0].children[3].children[1], outcome_D_W)

# Save the EFG
efg = g.write(format='native')
