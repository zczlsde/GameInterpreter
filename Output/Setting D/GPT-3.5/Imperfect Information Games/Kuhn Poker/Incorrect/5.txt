```python
g.set_infoset(g.root.children[0], g.root.children[1].infoset)
g.set_infoset(g.root.children[2], g.root.children[3].infoset)
g.set_infoset(g.root.children[4], g.root.children[5].infoset)
```

```python
import pygambit as gbt

# Create a new extensive-form game with two players, Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Three-card game")

# Add a chance node to represent the allocation of the three cards: JQ, JK, QJ, QK, KJ, KQ
g.append_move(g.root, g.players.chance, ["JQ", "JK", "QJ", "QK", "KJ", "KQ"])

# For each possible allocation of the cards, define the game structure
for node in g.root.children:
    # Alice can check or bet 1 without knowing the allocation of the chance node
    g.append_move(node, "Alice", ["Check", "Bet 1"])
    
    # If Alice checks
    g.append_move(node.children[0], "Bob", ["Check", "Bet 1"])
    g.append_move(node.children[0].children[1], "Bob", ["Fold", "Call"])
    
    # If Alice bets
    g.append_move(node.children[1], "Bob", ["Fold", "Call"])

# Set information sets for imperfect information handling
g.set_infoset(g.root.children[0], g.root.children[1].infoset)
g.set_infoset(g.root.children[2], g.root.children[3].infoset)
g.set_infoset(g.root.children[4], g.root.children[5].infoset)

# Define the outcomes for the game
alice_winsbig = g.add_outcome([2, -2], label="Alice wins big")
alice_wins = g.add_outcome([1, -1], label="Alice wins")
bob_winsbig = g.add_outcome([-2, 2], label="Bob wins big")
bob_wins = g.add_outcome([-1, 1], label="Bob wins")

# Set outcomes based on the game structure
g.set_outcome(g.root.children[0].children[0].children[0], alice_winsbig)
g.set_outcome(g.root.children[0].children[0].children[1], alice_wins)
g.set_outcome(g.root.children[0].children[1].children[0], bob_wins)
g.set_outcome(g.root.children[0].children[1].children[1], alice_wins)
g.set_outcome(g.root.children[2].children[0].children[0], alice_winsbig)
g.set_outcome(g.root.children[2].children[0].children[1], alice_wins)
g.set_outcome(g.root.children[2].children[1], bob_wins)
g.set_outcome(g.root.children[4].children[0].children[0], alice_winsbig)
g.set_outcome(g.root.children[4].children[0].children[1], alice_wins)
g.set_outcome(g.root.children[4].children[1], bob_wins)

# Save the EFG
efg = g.write(format='native')
```