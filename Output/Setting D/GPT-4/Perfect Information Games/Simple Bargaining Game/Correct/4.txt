```python
# Since the game is sequential and each player's move is clearly observed by the other,
# there is no need to group any nodes into the same information set based on the given description.
# Each decision is made with perfect information about the previous actions.
# Therefore, no set_infoset() function is necessary for this game scenario.
```

```python
import pygambit as gbt

# Initialize the game with two players, A and B
g = gbt.Game.new_tree(players=["A", "B"], title="Negotiation Game")

# A proposes the first distribution plan: A gets 5500, B gets 4500
g.append_move(g.root, "A", ["Propose 5500-4500"])

# B decides whether to accept or reject A's first proposal
g.append_move(g.root.children[0], "B", ["Accept", "Reject"])

# If B accepts, the game ends with the proposed distribution
g.set_outcome(g.root.children[0].children[0], g.add_outcome([5500, 4500], label="B Accepts Initial Proposal"))

# If B rejects, B proposes an equal split of 5000 each
g.append_move(g.root.children[0].children[1], "B", ["Propose 5000-5000"])

# A decides whether to accept or reject B's counterproposal
g.append_move(g.root.children[0].children[1].children[0], "A", ["Accept", "Reject"])

# If A accepts B's plan, the negotiation ends with both receiving 4750
g.set_outcome(g.root.children[0].children[1].children[0].children[0], g.add_outcome([4750, 4750], label="A Accepts Counterproposal"))

# If A rejects B's plan, A proposes a new plan where A gets 5200 and B gets 4800
g.append_move(g.root.children[0].children[1].children[0].children[1], "A", ["Propose 5200-4800"])

# B has no right to reject and must accept A's final proposal
g.set_outcome(g.root.children[0].children[1].children[0].children[1].children[0], g.add_outcome([4693, 4332], label="Final Proposal Accepted"))

# Save the EFG
efg = g.write(format='native')
```