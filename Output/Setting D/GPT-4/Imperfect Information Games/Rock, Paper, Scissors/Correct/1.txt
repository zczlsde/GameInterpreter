```python
# Since both players display their symbols simultaneously, neither player knows the other's choice at the time of decision.
# This creates a situation of imperfect information for both players.
# However, the game description and task focus on setting the information set for Player 2's decisions.
# Assume Player 1 moves first for the sake of sequential representation, choosing Rock, Paper, or Scissors.
# This results in three decision nodes for Player 2, one for each of Player 1's choices.
# Player 2, however, does not know Player 1's choice when making their own decision.
# Therefore, all of Player 2's decision nodes must be in the same information set to represent this uncertainty.

# Grouping Player 2's decision nodes under the same information set.
# Let's assume the nodes for Player 2's decisions after Player 1 chooses Rock, Paper, or Scissors are g.root.children[0], g.root.children[1], and g.root.children[2] respectively.
# We need to set two of these nodes to the information set of the third one to indicate that Player 2 cannot distinguish between these scenarios.

g.set_infoset(g.root.children[0], g.root.children[1].infoset) # Grouping Player 2's decision node after Player 1 chooses Rock with the decision node after Player 1 chooses Paper.
g.set_infoset(g.root.children[2], g.root.children[1].infoset) # Grouping Player 2's decision node after Player 1 chooses Scissors with the same information set, indicating all choices of Player 1 are indistinguishable to Player 2.
```

```python
import pygambit as gbt

# Create a new extensive-form game with two players
g = gbt.Game.new_tree(players=["Player 1", "Player 2"],
                      title="Rock, Paper, Scissors Game")

# Since both players choose their actions simultaneously, we model this by having Player 1 "move" first for the sake of creating the game tree.
# Player 1 has three actions: Rock, Paper, or Scissors.
g.append_move(g.root, "Player 1", ["Rock", "Paper", "Scissors"])

# For each of Player 1's actions, Player 2 has a decision to make without knowing Player 1's choice.
# This is represented by creating three separate decision nodes for Player 2, one following each of Player 1's possible actions.
for node in g.root.children:
    g.append_move(node, "Player 2", ["Rock", "Paper", "Scissors"])

# Since Player 2's decisions are made without knowledge of Player 1's action, all of Player 2's decision nodes are in the same information set.
# This is crucial to model the simultaneous move aspect of the game.
# We use the provided code to set the information set for Player 2's decisions.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)  # Grouping Player 2's decision node after Player 1 chooses Rock with the decision node after Player 1 chooses Paper.
g.set_infoset(g.root.children[2], g.root.children[1].infoset)  # Grouping Player 2's decision node after Player 1 chooses Scissors with the same information set.

# Now, we define the outcomes based on the rules of Rock, Paper, Scissors.
# Rock beats Scissors, Scissors beats Paper, and Paper beats Rock.
# We iterate over each of Player 1's choices (Rock, Paper, Scissors) and set outcomes for each of Player 2's responses.
for i, p1_choice in enumerate(["Rock", "Paper", "Scissors"]):
    for j, p2_choice in enumerate(["Rock", "Paper", "Scissors"]):
        if p1_choice == p2_choice:  # Draw condition
            outcome = g.add_outcome([0, 0], label=f"Draw: {p1_choice}")
        elif (p1_choice == "Rock" and p2_choice == "Scissors") or \
             (p1_choice == "Scissors" and p2_choice == "Paper") or \
             (p1_choice == "Paper" and p2_choice == "Rock"):  # Player 1 wins
            outcome = g.add_outcome([1, -1], label=f"P1 {p1_choice} beats P2 {p2_choice}")
        else:  # Player 2 wins
            outcome = g.add_outcome([-1, 1], label=f"P2 {p2_choice} beats P1 {p1_choice}")
        g.set_outcome(g.root.children[i].children[j], outcome)

# Save the EFG
efg = g.write(format='native')
```
This code constructs an extensive-form game representation of Rock, Paper, Scissors using the pygambit library. It models the simultaneous move aspect by treating Player 1's move as sequential for the sake of the game tree but uses information sets to accurately represent the simultaneous nature of the game. Outcomes are determined based on the rules of Rock, Paper, Scissors, with payoffs assigned to reflect wins, losses, and draws.