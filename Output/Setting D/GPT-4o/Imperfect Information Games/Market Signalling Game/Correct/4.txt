```python
# The game begins with a chance node that determines the strength of the new manufacturer: strong (S) or weak (W).
# The chance node has two outcomes: strong (S) with probability 2/3 and weak (W) with probability 1/3.

# After the chance node, the new manufacturer sends a signal: strong (S) or weak (W).
# The existing manufacturer observes this signal but does not know the actual strength of the new manufacturer.

# The existing manufacturer has decision nodes based on the observed signal:
# - If the signal is strong (S), the decision nodes are g.root.children[0].children[0] (strong and strong signal) and g.root.children[1].children[0] (weak and strong signal).
# - If the signal is weak (W), the decision nodes are g.root.children[0].children[1] (strong and weak signal) and g.root.children[1].children[1] (weak and weak signal).

# The existing manufacturer cannot distinguish between the actual strength of the new manufacturer based on the signal.
# Therefore, the decision nodes for the existing manufacturer should be grouped in the same information set based on the signal observed.

# Group the decision nodes for the existing manufacturer based on the observed signal.
g.set_infoset(g.root.children[0].children[0], g.root.children[1].children[0].infoset)  # Strong signal observed
g.set_infoset(g.root.children[0].children[1], g.root.children[1].children[1].infoset)  # Weak signal observed
```

```python
import pygambit as gbt

# Create a new extensive-form game with two players: New Manufacturer and Existing Manufacturer
g = gbt.Game.new_tree(players=["New Manufacturer", "Existing Manufacturer"],
                      title="Market Entry Game with Imperfect Information")

# Step 1: Add a chance node to determine the strength of the new manufacturer
# The chance node has two outcomes: strong (S) with probability 2/3 and weak (W) with probability 1/3.
g.append_move(g.root, g.players.chance, ["Strong", "Weak"])
g.set_chance_probs(g.root.infoset, [gbt.Rational(2, 3), gbt.Rational(1, 3)])

# Step 2: The new manufacturer sends a signal: strong (S) or weak (W)
# This move is made by the New Manufacturer after the chance node
g.append_move(g.root.children[0], "New Manufacturer", ["Strong Signal", "Weak Signal"])
g.append_move(g.root.children[1], "New Manufacturer", ["Strong Signal", "Weak Signal"])

# Step 3: The existing manufacturer observes the signal and makes a decision
# The existing manufacturer can choose to fight (F) or adapt (A) based on the observed signal
g.append_move(g.root.children[0].children[0], "Existing Manufacturer", ["Fight", "Adapt"])
g.append_move(g.root.children[0].children[1], "Existing Manufacturer", ["Fight", "Adapt"])
g.append_move(g.root.children[1].children[0], "Existing Manufacturer", ["Fight", "Adapt"])
g.append_move(g.root.children[1].children[1], "Existing Manufacturer", ["Fight", "Adapt"])

# Step 4: Set the information sets for the existing manufacturer based on the observed signal
# The existing manufacturer cannot distinguish between the actual strength of the new manufacturer based on the signal.
# Therefore, the decision nodes for the existing manufacturer should be grouped in the same information set based on the signal observed.
g.set_infoset(g.root.children[0].children[0], g.root.children[1].children[0].infoset)  # Strong signal observed
g.set_infoset(g.root.children[0].children[1], g.root.children[1].children[1].infoset)  # Weak signal observed

# Step 5: Set the payoffs for each possible outcome
# Strong manufacturer, strong signal
g.set_outcome(g.root.children[0].children[0].children[0], g.add_outcome([1, 0], label="Strong-Strong-Fight"))
g.set_outcome(g.root.children[0].children[0].children[1], g.add_outcome([3, 1], label="Strong-Strong-Adapt"))

# Strong manufacturer, weak signal
g.set_outcome(g.root.children[0].children[1].children[0], g.add_outcome([0, 0], label="Strong-Weak-Fight"))
g.set_outcome(g.root.children[0].children[1].children[1], g.add_outcome([2, 1], label="Strong-Weak-Adapt"))

# Weak manufacturer, strong signal
g.set_outcome(g.root.children[1].children[0].children[0], g.add_outcome([0, 2], label="Weak-Strong-Fight"))
g.set_outcome(g.root.children[1].children[0].children[1], g.add_outcome([2, 1], label="Weak-Strong-Adapt"))

# Weak manufacturer, weak signal
g.set_outcome(g.root.children[1].children[1].children[0], g.add_outcome([1, 2], label="Weak-Weak-Fight"))
g.set_outcome(g.root.children[1].children[1].children[1], g.add_outcome([3, 1], label="Weak-Weak-Adapt"))

# Save the EFG
efg = g.write(format='native')
```
