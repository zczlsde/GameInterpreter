```python
# Step-by-step thought process:
# 1. Player 1 makes the first move with options A, B, or C.
# 2. Player 2 moves next without knowing Player 1's choice, indicating imperfect information.
#    Therefore, Player 2's decision nodes for each of Player 1's actions (A, B, C) should be in the same information set.
# 3. Player 1 moves again after observing Player 2's choice, so no need to group these nodes in an information set.
# 4. Player 3 makes the final decision, and since they observe all previous actions, no need for an information set here.

# Group Player 2's decision nodes in the same information set because Player 2 does not know Player 1's choice.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)
g.set_infoset(g.root.children[2], g.root.children[1].infoset)
```

```python
import pygambit as gbt

# Create a new extensive-form game with three players
g = gbt.Game.new_tree(players=["Player 1", "Player 2", "Player 3"],
                      title="Imperfect Information Game")

# Step 1: Player 1 makes the first move with options A, B, or C.
g.append_move(g.root, "Player 1", ["A", "B", "C"])

# Step 2: Player 2 moves next without knowing Player 1's choice.
# Player 2 has the same options D or E for each of Player 1's actions.
g.append_move(g.root.children[0], "Player 2", ["D", "E"])
g.append_move(g.root.children[1], "Player 2", ["D", "E"])
g.append_move(g.root.children[2], "Player 2", ["D", "E"])

# Group Player 2's decision nodes in the same information set because Player 2 does not know Player 1's choice.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)
g.set_infoset(g.root.children[2], g.root.children[1].infoset)

# Step 3: Player 1 moves again after observing Player 2's choice.
# Player 1 has options F or G after each of Player 2's actions.
g.append_move(g.root.children[0].children[0], "Player 1", ["F", "G"])
g.append_move(g.root.children[0].children[1], "Player 1", ["F", "G"])
g.append_move(g.root.children[1].children[0], "Player 1", ["F", "G"])
g.append_move(g.root.children[1].children[1], "Player 1", ["F", "G"])
g.append_move(g.root.children[2].children[0], "Player 1", ["F", "G"])
g.append_move(g.root.children[2].children[1], "Player 1", ["F", "G"])

# Step 4: Player 3 makes the final decision with options Q or W.
# Player 3 observes all previous actions, so no need for an information set here.
for node in g.root.children:
    for child in node.children:
        for grandchild in child.children:
            g.append_move(grandchild, "Player 3", ["Q", "W"])

# Define the outcomes based on Player 3's decision
outcome_q = g.add_outcome([3, 3, 3], label="All players receive 3")
outcome_w = g.add_outcome([2, 2, 3], label="Player 1 and 2 receive 2, Player 3 receives 3")

# Set the outcomes for each terminal node
for node in g.root.children:
    for child in node.children:
        for grandchild in child.children:
            g.set_outcome(grandchild.children[0], outcome_q)
            g.set_outcome(grandchild.children[1], outcome_w)

# Save the EFG
efg = g.write(format='native')
```