```python
# Thought process:
# In this game, both players choose their actions (rock, paper, or scissors) simultaneously.
# This means that each player does not know the action chosen by the other player at the time of their decision.
# To represent this in a sequential game structure, we can assume one player moves first, followed by the other.
# However, since they move simultaneously, the second player does not know the first player's action.
# Therefore, the decision nodes for the second player should be grouped into the same information set.

# Let's assume Player 1 moves first and Player 2 moves second.
# Player 1's decision node is the root node, g.root.
# Player 1 has three actions: rock, paper, scissors.
# Player 2's decision nodes are g.root.children[0], g.root.children[1], and g.root.children[2],
# corresponding to Player 1's actions rock, paper, and scissors, respectively.
# Since Player 2 cannot distinguish between these nodes (as they move simultaneously),
# these nodes should be grouped in the same information set.

g.set_infoset(g.root.children[0], g.root.children[1].infoset)
g.set_infoset(g.root.children[2], g.root.children[1].infoset)
```

```python
import pygambit as gbt

# Create a new extensive-form game with two players: Player 1 and Player 2.
g = gbt.Game.new_tree(players=["Player 1", "Player 2"], title="Rock-Paper-Scissors with Imperfect Information")

# Player 1 moves first and has three actions: Rock, Paper, Scissors.
g.append_move(g.root, "Player 1", ["Rock", "Paper", "Scissors"])

# Player 2 moves second. Player 2's decision nodes are g.root.children[0], g.root.children[1], and g.root.children[2],
# corresponding to Player 1's actions Rock, Paper, and Scissors, respectively.
# Player 2 also has three actions: Rock, Paper, Scissors.
g.append_move(g.root.children[0], "Player 2", ["Rock", "Paper", "Scissors"])
g.append_move(g.root.children[1], "Player 2", ["Rock", "Paper", "Scissors"])
g.append_move(g.root.children[2], "Player 2", ["Rock", "Paper", "Scissors"])

# Since Player 2 cannot distinguish between these nodes (as they move simultaneously),
# these nodes should be grouped in the same information set.
# Use the identical code block provided to handle the imperfect information.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)
g.set_infoset(g.root.children[2], g.root.children[1].infoset)

# Define the outcomes for each combination of actions.
# Rock vs Rock, Paper vs Paper, Scissors vs Scissors: Draw (0, 0)
draw = g.add_outcome([0, 0], label="Draw")
g.set_outcome(g.root.children[0].children[0], draw)
g.set_outcome(g.root.children[1].children[1], draw)
g.set_outcome(g.root.children[2].children[2], draw)

# Rock vs Scissors: Player 1 wins (1, -1)
p1_wins = g.add_outcome([1, -1], label="Player 1 wins")
g.set_outcome(g.root.children[0].children[2], p1_wins)

# Scissors vs Paper: Player 1 wins (1, -1)
g.set_outcome(g.root.children[2].children[1], p1_wins)

# Paper vs Rock: Player 1 wins (1, -1)
g.set_outcome(g.root.children[1].children[0], p1_wins)

# Scissors vs Rock: Player 2 wins (-1, 1)
p2_wins = g.add_outcome([-1, 1], label="Player 2 wins")
g.set_outcome(g.root.children[2].children[0], p2_wins)

# Paper vs Scissors: Player 2 wins (-1, 1)
g.set_outcome(g.root.children[1].children[2], p2_wins)

# Rock vs Paper: Player 2 wins (-1, 1)
g.set_outcome(g.root.children[0].children[1], p2_wins)

# Save the EFG
efg = g.write(format='native')
```