```python
# Step-by-step thought process:

# There are 6 possible outcomes for the chance node:
# JQ (g.root.children[0]), JK (g.root.children[1]), QJ (g.root.children[2]), QK (g.root.children[3]), KJ (g.root.children[4]), KQ (g.root.children[5]).

# Alice's decision nodes are grouped based on her card, as she does not know Bob's card or the card set aside:
# JQ (g.root.children[0]) and JK (g.root.children[1]) - Alice has Jack
# QJ (g.root.children[2]) and QK (g.root.children[3]) - Alice has Queen
# KJ (g.root.children[4]) and KQ (g.root.children[5]) - Alice has King

# Bob's decision nodes are grouped based on his lack of knowledge about Alice's card:
# After Alice checks, Bob's decision nodes are:
# QJ (g.root.children[2].children[0]) and KJ (g.root.children[4].children[0]) - Bob has Jack
# JQ (g.root.children[0].children[0]) and KQ (g.root.children[5].children[0]) - Bob has Queen
# JK (g.root.children[1].children[0]) and QK (g.root.children[3].children[0]) - Bob has King

# After Alice bets, Bob's decision nodes are:
# QJ (g.root.children[2].children[1]) and KJ (g.root.children[4].children[1]) - Bob has Jack
# JQ (g.root.children[0].children[1]) and KQ (g.root.children[5].children[1]) - Bob has Queen
# JK (g.root.children[1].children[1]) and QK (g.root.children[3].children[1]) - Bob has King

# Alice's decision nodes after Bob bets are:
# JQ (g.root.children[0].children[0].children[1]) and JK (g.root.children[1].children[0].children[1]) - Alice has Jack
# QJ (g.root.children[2].children[0].children[1]) and QK (g.root.children[3].children[0].children[1]) - Alice has Queen
# KJ (g.root.children[4].children[0].children[1]) and KQ (g.root.children[5].children[0].children[1]) - Alice has King

# Set information sets for Alice's initial decision nodes
g.set_infoset(g.root.children[0], g.root.children[1].infoset)
g.set_infoset(g.root.children[2], g.root.children[3].infoset)
g.set_infoset(g.root.children[4], g.root.children[5].infoset)

# Set information sets for Bob's decision nodes after Alice checks
g.set_infoset(g.root.children[2].children[0], g.root.children[4].children[0].infoset)
g.set_infoset(g.root.children[0].children[0], g.root.children[5].children[0].infoset)
g.set_infoset(g.root.children[1].children[0], g.root.children[3].children[0].infoset)

# Set information sets for Bob's decision nodes after Alice bets
g.set_infoset(g.root.children[2].children[1], g.root.children[4].children[1].infoset)
g.set_infoset(g.root.children[0].children[1], g.root.children[5].children[1].infoset)
g.set_infoset(g.root.children[1].children[1], g.root.children[3].children[1].infoset)

# Set information sets for Alice's decision nodes after Bob bets
g.set_infoset(g.root.children[0].children[0].children[1], g.root.children[1].children[0].children[1].infoset)
g.set_infoset(g.root.children[2].children[0].children[1], g.root.children[3].children[0].children[1].infoset)
g.set_infoset(g.root.children[4].children[0].children[1], g.root.children[5].children[0].children[1].infoset)
```

```python
import pygambit as gbt

# Create a new extensive-form game with players Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Three-card poker game")

# Step 1: Define the chance node for card allocation
# There are 6 possible outcomes for the chance node: JQ, JK, QJ, QK, KJ, and KQ.
g.append_move(g.root, g.players.chance, ["JQ", "JK", "QJ", "QK", "KJ", "KQ"])

# Set the probabilities for the chance node, each with probability 1/6
g.set_chance_probs(g.root.infoset, [gbt.Rational(1, 6)] * 6)

# Step 2: Alice's decision nodes
# Alice can check or bet 1, without knowing the allocation of the chance node.
for node in g.root.children:
    g.append_move(node, "Alice", ["Check", "Bet"])

# Step 3: Bob's decision nodes after Alice checks
# Bob can check or bet 1, without knowing Alice's card.
for node in g.root.children:
    g.append_move(node.children[0], "Bob", ["Check", "Bet"])

# Step 4: Alice's decision nodes after Bob bets (if Alice checked initially)
# Alice can fold or call, without knowing Bob's card.
for node in g.root.children:
    g.append_move(node.children[0].children[1], "Alice", ["Fold", "Call"])

# Step 5: Bob's decision nodes after Alice bets
# Bob can fold or call, without knowing Alice's card.
for node in g.root.children:
    g.append_move(node.children[1], "Bob", ["Fold", "Call"])

# Step 6: Set information sets for imperfect information
# Set information sets for Alice's initial decision nodes
g.set_infoset(g.root.children[0], g.root.children[1].infoset)
g.set_infoset(g.root.children[2], g.root.children[3].infoset)
g.set_infoset(g.root.children[4], g.root.children[5].infoset)

# Set information sets for Bob's decision nodes after Alice checks
g.set_infoset(g.root.children[2].children[0], g.root.children[4].children[0].infoset)
g.set_infoset(g.root.children[0].children[0], g.root.children[5].children[0].infoset)
g.set_infoset(g.root.children[1].children[0], g.root.children[3].children[0].infoset)

# Set information sets for Bob's decision nodes after Alice bets
g.set_infoset(g.root.children[2].children[1], g.root.children[4].children[1].infoset)
g.set_infoset(g.root.children[0].children[1], g.root.children[5].children[1].infoset)
g.set_infoset(g.root.children[1].children[1], g.root.children[3].children[1].infoset)

# Set information sets for Alice's decision nodes after Bob bets
g.set_infoset(g.root.children[0].children[0].children[1], g.root.children[1].children[0].children[1].infoset)
g.set_infoset(g.root.children[2].children[0].children[1], g.root.children[3].children[0].children[1].infoset)
g.set_infoset(g.root.children[4].children[0].children[1], g.root.children[5].children[0].children[1].infoset)

# Step 7: Define outcomes based on the final card comparison
# Outcomes are defined based on the higher card winning
# Alice wins 1 if Bob folds or checks with a lower card, Bob wins 1 if Alice folds or checks with a lower card
# Alice wins 2 if Bob calls and Alice has a higher card, Bob wins 2 if Alice calls and Bob has a higher card

# Define outcomes for each possible scenario
alice_wins_1 = g.add_outcome([1, -1], label="Alice wins 1")
bob_wins_1 = g.add_outcome([-1, 1], label="Bob wins 1")
alice_wins_2 = g.add_outcome([2, -2], label="Alice wins 2")
bob_wins_2 = g.add_outcome([-2, 2], label="Bob wins 2")

# Assign outcomes to the terminal nodes
# For simplicity, we assume the higher card wins in each scenario
# Alice checks, Bob checks
g.set_outcome(g.root.children[0].children[0].children[0], bob_wins_1)  # JQ, Bob has Q
g.set_outcome(g.root.children[1].children[0].children[0], bob_wins_1)  # JK, Bob has K
g.set_outcome(g.root.children[2].children[0].children[0], alice_wins_1)  # QJ, Alice has Q
g.set_outcome(g.root.children[3].children[0].children[0], bob_wins_1)  # QK, Bob has K
g.set_outcome(g.root.children[4].children[0].children[0], alice_wins_1)  # KJ, Alice has K
g.set_outcome(g.root.children[5].children[0].children[0], alice_wins_1)  # KQ, Alice has K

# Alice checks, Bob bets, Alice folds
g.set_outcome(g.root.children[0].children[0].children[1].children[0], bob_wins_1)  # JQ, Bob has Q
g.set_outcome(g.root.children[1].children[0].children[1].children[0], bob_wins_1)  # JK, Bob has K
g.set_outcome(g.root.children[2].children[0].children[1].children[0], bob_wins_1)  # QJ, Bob bets
g.set_outcome(g.root.children[3].children[0].children[1].children[0], bob_wins_1)  # QK, Bob has K
g.set_outcome(g.root.children[4].children[0].children[1].children[0], bob_wins_1)  # KJ, Bob bets
g.set_outcome(g.root.children[5].children[0].children[1].children[0], bob_wins_1)  # KQ, Bob bets

# Alice checks, Bob bets, Alice calls
g.set_outcome(g.root.children[0].children[0].children[1].children[1], bob_wins_2)  # JQ, Bob has Q
g.set_outcome(g.root.children[1].children[0].children[1].children[1], bob_wins_2)  # JK, Bob has K
g.set_outcome(g.root.children[2].children[0].children[1].children[1], alice_wins_2)  # QJ, Alice has Q
g.set_outcome(g.root.children[3].children[0].children[1].children[1], bob_wins_2)  # QK, Bob has K
g.set_outcome(g.root.children[4].children[0].children[1].children[1], alice_wins_2)  # KJ, Alice has K
g.set_outcome(g.root.children[5].children[0].children[1].children[1], alice_wins_2)  # KQ, Alice has K

# Alice bets, Bob folds
g.set_outcome(g.root.children[0].children[1].children[0], alice_wins_1)  # JQ, Bob folds
g.set_outcome(g.root.children[1].children[1].children[0], alice_wins_1)  # JK, Bob folds
g.set_outcome(g.root.children[2].children[1].children[0], alice_wins_1)  # QJ, Bob folds
g.set_outcome(g.root.children[3].children[1].children[0], alice_wins_1)  # QK, Bob folds
g.set_outcome(g.root.children[4].children[1].children[0], alice_wins_1)  # KJ, Bob folds
g.set_outcome(g.root.children[5].children[1].children[0], alice_wins_1)  # KQ, Bob folds

# Alice bets, Bob calls
g.set_outcome(g.root.children[0].children[1].children[1], bob_wins_2)  # JQ, Bob has Q
g.set_outcome(g.root.children[1].children[1].children[1], bob_wins_2)  # JK, Bob has K
g.set_outcome(g.root.children[2].children[1].children[1], alice_wins_2)  # QJ, Alice has Q
g.set_outcome(g.root.children[3].children[1].children[1], bob_wins_2)  # QK, Bob has K
g.set_outcome(g.root.children[4].children[1].children[1], alice_wins_2)  # KJ, Alice has K
g.set_outcome(g.root.children[5].children[1].children[1], alice_wins_2)  # KQ, Alice has K

# Save the EFG
efg = g.write(format='native')
```