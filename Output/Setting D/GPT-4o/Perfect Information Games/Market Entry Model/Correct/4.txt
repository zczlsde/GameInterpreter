```python
# Step 1: Identify the decision nodes for each player.
# Firm 2 decides first whether to enter or stay out.
# If Firm 2 enters, Firm 1 decides whether to Fight or Accommodate.

# Step 2: Determine the information sets.
# Since Firm 1 makes its decision after Firm 2, Firm 1 knows Firm 2's decision.
# Therefore, there is no imperfect information for Firm 1 in this game.

# Step 3: Since there is no simultaneous move or hidden information, no information sets need to be set for imperfect information.
# Therefore, no set_infoset() function is needed in this case.
```

```python
import pygambit as gbt

# Create a new extensive-form game with two players: Firm 1 and Firm 2
g = gbt.Game.new_tree(players=["Firm 1", "Firm 2"], title="Entry Deterrence Game")

# Step 1: Firm 2 decides first whether to enter or stay out.
g.append_move(g.root, "Firm 2", ["Enter", "Out"])

# Step 2: If Firm 2 enters, Firm 1 decides whether to Fight or Accommodate.
g.append_move(g.root.children[0], "Firm 1", ["Fight", "Accommodate"])

# Step 3: Set the payoffs according to the conditions given:
# - Firm 1 earns more if Firm 2 does not enter.
# - If Firm 2 enters, Firm 1 and Firm 2 earn the same amount if Firm 1 accommodates.
# - If Firm 2 enters, Firm 2 earns more than firm 1 if Firm 1 fights.

# Payoffs for the outcomes
# Outcome when Firm 2 chooses "Out"
outcome_out = g.add_outcome([3, 0], label="Firm 2 Out")  # Firm 1 earns more if Firm 2 does not enter

# Outcome when Firm 2 chooses "Enter" and Firm 1 chooses "Fight"
outcome_fight = g.add_outcome([1, 2], label="Firm 1 Fights")  # Firm 2 earns more than Firm 1

# Outcome when Firm 2 chooses "Enter" and Firm 1 chooses "Accommodate"
outcome_accommodate = g.add_outcome([2, 2], label="Firm 1 Accommodates")  # Both earn the same amount

# Set the outcomes for each terminal node
g.set_outcome(g.root.children[1], outcome_out)
g.set_outcome(g.root.children[0].children[0], outcome_fight)
g.set_outcome(g.root.children[0].children[1], outcome_accommodate)

# Save the EFG
efg = g.write(format='native')
```