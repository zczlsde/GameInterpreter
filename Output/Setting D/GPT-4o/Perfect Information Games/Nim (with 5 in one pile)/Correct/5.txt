```python
# Thought process:
# In this game, there is no simultaneous move or hidden information. 
# Each player knows the state of the game (number of stones left) and the actions taken by the other player.
# Therefore, there are no information sets to be set for this game.
# Each decision node is fully observable by both players, and they know exactly which node they are at.
# As a result, there is no need to use g.set_infoset() in this game.
```

```python
import pygambit as gbt

# Create a new extensive-form game with two players: Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Stone Game")

# Alice starts the game by taking either one or two stones
g.append_move(g.root, "Alice", ["Take 1", "Take 2"])

# If Alice takes one stone, Bob can take one or two stones
g.append_move(g.root.children[0], "Bob", ["Take 1", "Take 2"])

# If Bob takes one stone, Alice can take one or two stones
g.append_move(g.root.children[0].children[0], "Alice", ["Take 1", "Take 2"])

# If Alice takes one stone, Bob can take one or two stones
g.append_move(g.root.children[0].children[0].children[0], "Bob", ["Take 1", "Take 2"])

# If Bob takes one stone, Alice can take one stone
g.append_move(g.root.children[0].children[0].children[0].children[0], "Alice", ["Take 1"])

# If Alice takes one stone, Alice loses
alice_loses = g.add_outcome([-1, 1], label="Alice loses")
g.set_outcome(g.root.children[0].children[0].children[0].children[0].children[0], alice_loses)

# If Bob takes two stones, Bob loses
bob_loses = g.add_outcome([1, -1], label="Bob loses")
g.set_outcome(g.root.children[0].children[0].children[0].children[1], bob_loses)

# If Alice takes two stones, Bob can take one stone
g.append_move(g.root.children[0].children[0].children[1], "Bob", ["Take 1"])

# If Bob takes one stone, Bob loses
g.set_outcome(g.root.children[0].children[0].children[1].children[0], bob_loses)

# If Bob takes two stones, Alice can take one or two stones
g.append_move(g.root.children[0].children[1], "Alice", ["Take 1", "Take 2"])

# If Alice takes one stone, Bob can take one stone
g.append_move(g.root.children[0].children[1].children[0], "Bob", ["Take 1"])

# If Bob takes one stone, Bob loses
g.set_outcome(g.root.children[0].children[1].children[0].children[0], bob_loses)

# If Alice takes two stones, Alice loses
g.set_outcome(g.root.children[0].children[1].children[1], alice_loses)

# If Alice takes two stones, Bob can take one or two stones
g.append_move(g.root.children[1], "Bob", ["Take 1", "Take 2"])

# If Bob takes one stone, Alice can take one or two stones
g.append_move(g.root.children[1].children[0], "Alice", ["Take 1", "Take 2"])

# If Alice takes one stone, Bob can take one stone
g.append_move(g.root.children[1].children[0].children[0], "Bob", ["Take 1"])

# If Bob takes one stone, Bob loses
g.set_outcome(g.root.children[1].children[0].children[0].children[0], bob_loses)

# If Alice takes two stones, Alice loses
g.set_outcome(g.root.children[1].children[0].children[1], alice_loses)

# If Bob takes two stones, Alice can take one stone
g.append_move(g.root.children[1].children[1], "Alice", ["Take 1"])

# If Alice takes one stone, Alice loses
g.set_outcome(g.root.children[1].children[1].children[0], alice_loses)

# Save the EFG
efg = g.write(format='native')
```
