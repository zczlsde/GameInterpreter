```python
# Thought process:
# In this game, there is no simultaneous move or hidden information. 
# Each player knows the state of the game (number of stones left) and the actions taken by the other player.
# Therefore, there are no information sets to be set for this game.
# Each decision node is fully observable by both players, and they know exactly which node they are at.
# Hence, no set_infoset() function is needed for this game.
```

```python
import pygambit as gbt

# Create a new extensive-form game with two players: Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Stone Game")

# Alice starts the game with 5 stones in the pile
g.append_move(g.root, "Alice", ["Take 1 stone", "Take 2 stones"])

# If Alice takes 1 stone, Bob has 4 stones left
g.append_move(g.root.children[0], "Bob", ["Take 1 stone", "Take 2 stones"])

# If Bob takes 1 stone, Alice has 3 stones left
g.append_move(g.root.children[0].children[0], "Alice", ["Take 1 stone", "Take 2 stones"])

# If Alice takes 1 stone, Bob has 2 stones left
g.append_move(g.root.children[0].children[0].children[0], "Bob", ["Take 1 stone", "Take 2 stones"])

# If Bob takes 1 stone, Alice has 1 stone left
g.append_move(g.root.children[0].children[0].children[0].children[0], "Alice", ["Take 1 stone"])

# Outcomes for the above path
# Alice takes 1 stone and loses
g.set_outcome(g.root.children[0].children[0].children[0].children[0].children[0], g.add_outcome([-1, 1], label="Alice loses"))

# If Bob takes 2 stones, Bob loses
g.set_outcome(g.root.children[0].children[0].children[0].children[1], g.add_outcome([1, -1], label="Bob loses"))

# If Alice takes 2 stones, Bob has 1 stone left
g.append_move(g.root.children[0].children[0].children[1], "Bob", ["Take 1 stone"])

# Bob takes 1 stone and loses
g.set_outcome(g.root.children[0].children[0].children[1].children[0], g.add_outcome([1, -1], label="Bob loses"))

# If Bob takes 2 stones, Alice has 2 stones left
g.append_move(g.root.children[0].children[1], "Alice", ["Take 1 stone", "Take 2 stones"])

# If Alice takes 1 stone, Bob has 1 stone left
g.append_move(g.root.children[0].children[1].children[0], "Bob", ["Take 1 stone"])

# Bob takes 1 stone and loses
g.set_outcome(g.root.children[0].children[1].children[0].children[0], g.add_outcome([1, -1], label="Bob loses"))

# If Alice takes 2 stones, Alice loses
g.set_outcome(g.root.children[0].children[1].children[1], g.add_outcome([-1, 1], label="Alice loses"))

# If Alice takes 2 stones initially, Bob has 3 stones left
g.append_move(g.root.children[1], "Bob", ["Take 1 stone", "Take 2 stones"])

# If Bob takes 1 stone, Alice has 2 stones left
g.append_move(g.root.children[1].children[0], "Alice", ["Take 1 stone", "Take 2 stones"])

# If Alice takes 1 stone, Bob has 1 stone left
g.append_move(g.root.children[1].children[0].children[0], "Bob", ["Take 1 stone"])

# Bob takes 1 stone and loses
g.set_outcome(g.root.children[1].children[0].children[0].children[0], g.add_outcome([1, -1], label="Bob loses"))

# If Alice takes 2 stones, Alice loses
g.set_outcome(g.root.children[1].children[0].children[1], g.add_outcome([-1, 1], label="Alice loses"))

# If Bob takes 2 stones, Alice has 1 stone left
g.append_move(g.root.children[1].children[1], "Alice", ["Take 1 stone"])

# Alice takes 1 stone and loses
g.set_outcome(g.root.children[1].children[1].children[0], g.add_outcome([-1, 1], label="Alice loses"))

# Save the EFG
efg = g.write(format='native')
```