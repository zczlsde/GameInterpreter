```python
import pygambit as gbt

# Create a new game with two players
g = gbt.Game.new_tree(players=["Player 1", "Player 2"], title="A strategic game with chance node")

# Append a chance move at the root with four outcomes: A, B, C, D
# We use gbt.Rational to represent the probabilities for each outcome equally likely
g.append_move(g.root, g.players.chance, ["A", "B", "C", "D"])
g.set_chance_probs(g.root.infoset, [gbt.Rational(1, 4) for _ in range(4)])

# For each outcome of the chance node, Player 1 will choose from three actions: E, F, G
for chance_node in g.root.children:
    g.append_move(chance_node, "Player 1", ["E", "F", "G"])

# For each of Player 1's actions, Player 2 will choose between two actions: Q or W
for chance_node in g.root.children:
    for player1_node in chance_node.children:
        g.append_move(player1_node, "Player 2", ["Q", "W"])

# Define the payoffs for each combination under each chance outcome
# The structure is outcomes[A-D][Player1's actions[E, F, G]][Player2's actions[Q, W]]
outcomes = {
    "A": {"E": {"Q": [1, -1], "W": [2, -2]},
          "F": {"Q": [1, -1], "W": [2, -2]},
          "G": {"Q": [1, -1], "W": [2, -2]}},
    "B": {"E": {"Q": [3, -3], "W": [-3, 3]},
          "F": {"Q": [3, -3], "W": [-3, 3]},
          "G": {"Q": [3, -3], "W": [-3, 3]}},
    "C": {"E": {"Q": [0, 0], "W": [-1, 1]},
          "F": {"Q": [0, 0], "W": [-1, 1]},
          "G": {"Q": [0, 0], "W": [-1, 1]}},
    "D": {"E": {"Q": [4, -4], "W": [-4, 4]},
          "F": {"Q": [4, -4], "W": [-4, 4]},
          "G": {"Q": [4, -4], "W": [-4, 4]}}
}

# Set the outcomes for each path in the game tree
for i, chance_node in enumerate(g.root.children):
    outcome_key = ["A", "B", "C", "D"][i]
    for j, player1_node in enumerate(chance_node.children):
        action_key = ["E", "F", "G"][j]
        for k, player2_node in enumerate(player1_node.children):
            result_key = ["Q", "W"][k]
            payoff = outcomes[outcome_key][action_key][result_key]
            g.set_outcome(player2_node, g.add_outcome(payoff))

# Save the EFG
efg = g.write(format='native')
```

This code snippet creates a game tree with a chance node leading to different outcomes (A, B, C, D), followed by Player 1's decision among three actions (E, F, G), and finally Player 2's decision between two actions (Q, W). The payoffs are set according to the game description for each path through the game tree. The use of `gbt.Rational(1, 4)` ensures that each outcome of the chance node is equally likely.