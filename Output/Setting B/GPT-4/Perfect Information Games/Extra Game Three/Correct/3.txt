```python
import pygambit as gbt

# Create a new game with two players
g = gbt.Game.new_tree(players=["Player 1", "Player 2"], title="A strategic game with chance node")

# First, append a chance node with four outcomes: A, B, C, D
# We use gbt.Rational to represent the probabilities for each outcome equally likely
g.append_move(g.root, g.players.chance, ["A", "B", "C", "D"])
g.set_chance_probs(g.root.infoset, [gbt.Rational(1, 4) for _ in range(4)])

# After the chance node, Player 1 will choose from three actions: E, F, or G
# We append these moves for each outcome of the chance node
for chance_outcome in g.root.children:
    g.append_move(chance_outcome, "Player 1", ["E", "F", "G"])

# Player 2, having observed Player 1's choice, will choose between two actions: Q or W
# We append these moves for each of Player 1's actions
for chance_outcome in g.root.children:
    for player1_action in chance_outcome.children:
        g.append_move(player1_action, "Player 2", ["Q", "W"])

# Now, we set the outcomes based on the game description
# The outcomes are different depending on the initial chance outcome
# Under A
g.set_outcome(g.root.children[0].children[0].children[0], g.add_outcome([1, -1]))
g.set_outcome(g.root.children[0].children[0].children[1], g.add_outcome([2, -2]))
g.set_outcome(g.root.children[0].children[1].children[0], g.add_outcome([1, -1]))
g.set_outcome(g.root.children[0].children[1].children[1], g.add_outcome([2, -2]))
g.set_outcome(g.root.children[0].children[2].children[0], g.add_outcome([1, -1]))
g.set_outcome(g.root.children[0].children[2].children[1], g.add_outcome([2, -2]))

# Under B
g.set_outcome(g.root.children[1].children[0].children[0], g.add_outcome([3, -3]))
g.set_outcome(g.root.children[1].children[0].children[1], g.add_outcome([-3, 3]))
g.set_outcome(g.root.children[1].children[1].children[0], g.add_outcome([3, -3]))
g.set_outcome(g.root.children[1].children[1].children[1], g.add_outcome([-3, 3]))
g.set_outcome(g.root.children[1].children[2].children[0], g.add_outcome([3, -3]))
g.set_outcome(g.root.children[1].children[2].children[1], g.add_outcome([-3, 3]))

# Under C
g.set_outcome(g.root.children[2].children[0].children[0], g.add_outcome([0, 0]))
g.set_outcome(g.root.children[2].children[0].children[1], g.add_outcome([-1, 1]))
g.set_outcome(g.root.children[2].children[1].children[0], g.add_outcome([0, 0]))
g.set_outcome(g.root.children[2].children[1].children[1], g.add_outcome([-1, 1]))
g.set_outcome(g.root.children[2].children[2].children[0], g.add_outcome([0, 0]))
g.set_outcome(g.root.children[2].children[2].children[1], g.add_outcome([-1, 1]))

# Under D
g.set_outcome(g.root.children[3].children[0].children[0], g.add_outcome([4, -4]))
g.set_outcome(g.root.children[3].children[0].children[1], g.add_outcome([-4, 4]))
g.set_outcome(g.root.children[3].children[1].children[0], g.add_outcome([4, -4]))
g.set_outcome(g.root.children[3].children[1].children[1], g.add_outcome([-4, 4]))
g.set_outcome(g.root.children[3].children[2].children[0], g.add_outcome([4, -4]))
g.set_outcome(g.root.children[3].children[2].children[1], g.add_outcome([-4, 4]))

# Save the EFG
efg = g.write(format='native')
```

This code snippet creates a game tree for a game with a chance node followed by decisions from Player 1 and Player 2. The game starts with a chance node that randomly selects one of four outcomes (A, B, C, or D) with equal probability. Based on the outcome of the chance node, Player 1 chooses one of three actions (E, F, or G). Then, Player 2 makes a decision between two actions (Q or W) after observing Player 1's choice. The payoffs for each player are determined by the initial outcome of the chance node and the combination of actions chosen by Player 1 and Player 2.