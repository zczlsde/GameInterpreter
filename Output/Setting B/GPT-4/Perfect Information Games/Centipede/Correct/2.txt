To generate the Extensive Form Game (EFG) for the described game using the PyGambit library, we'll follow the game's structure closely. The game involves sequential moves with no simultaneous actions, as Alice moves first, followed by Bob, and this pattern repeats for a total of four moves. The doubling of the piles when pushed and the decision to take or push at each step are key elements. We'll represent the game's progression without using recursion or loops, explicitly detailing each move and its consequences.

```python
import pygambit as gbt

# Initialize the game with two players: Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Doubling Coins Game")

# Initial move by Alice: she can either "take" or "push" the piles
g.append_move(g.root, "Alice", ["take", "push"])

# If Alice takes, the game ends. We set the outcomes directly.
# Alice takes 4, gives 1 to Bob. No doubling occurs here because the game ends.
g.set_outcome(g.root.children[0], g.add_outcome([4, 1], label="Alice takes"))

# If Alice pushes, the piles double and it's Bob's turn.
# The piles are now 2 and 8.
g.append_move(g.root.children[1], "Bob", ["take", "push"])

# If Bob takes after the first push, he takes 8, gives 2 to Alice.
g.set_outcome(g.root.children[1].children[0], g.add_outcome([2, 8], label="Bob takes after first push"))

# If Bob pushes, the piles double again to 4 and 16, and it's Alice's turn.
g.append_move(g.root.children[1].children[1], "Alice", ["take", "push"])

# If Alice takes after the second push, she takes 16, gives 4 to Bob.
g.set_outcome(g.root.children[1].children[1].children[0], g.add_outcome([16, 4], label="Alice takes after second push"))

# If Alice pushes, the piles double again to 8 and 32, and it's Bob's turn for the last move.
g.append_move(g.root.children[1].children[1].children[1], "Bob", ["take", "push"])

# If Bob takes after the third push, he takes 32, gives 8 to Alice.
g.set_outcome(g.root.children[1].children[1].children[1].children[0], g.add_outcome([8, 32], label="Bob takes after third push"))

# If Bob pushes for the last time, the piles double to 16 and 64, and the game ends with Alice taking the larger pile.
# This is the final state of the game, so we set the outcome directly.
g.set_outcome(g.root.children[1].children[1].children[1].children[1], g.add_outcome([64, 16], label="Final push"))

# Save the EFG
efg = g.write(format='native')
```

This code snippet constructs the game tree step by step, detailing each player's decision points and the outcomes of those decisions. The doubling effect of the piles when pushed and the final allocation of coins based on the players' choices are explicitly modeled. The use of `g.set_outcome` directly assigns the results of each decision, avoiding recursion or loops and adhering to the game's sequential structure.