To generate the Extensive Form Game (EFG) for the described game using the PyGambit library, we'll follow the game's structure closely. The game involves sequential moves with no simultaneous actions, as Alice moves first, followed by Bob, and this pattern repeats for a total of four moves. The doubling of the piles when pushed and the decision to take or push the piles are key elements of the game. We'll represent these actions and their consequences in the EFG without using recursion, loops, or the "+" operator for concatenation or arithmetic.

```python
import pygambit as gbt

# Initialize the game with two players: Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Coin Piles Game")

# Initial move by Alice: she can either "take" or "push" the piles
g.append_move(g.root, "Alice", ["take", "push"])

# If Alice takes, the game ends. We need to set the outcomes directly after her move.
# Alice takes 4, gives 1 to Bob
g.set_outcome(g.root.children[0], g.add_outcome([4, 1], label="Alice takes"))

# If Alice pushes, the piles double and it's Bob's turn.
# Bob now faces a similar decision with doubled piles: 2 and 8 coins.
g.append_move(g.root.children[1], "Bob", ["take", "push"])

# If Bob takes after the first push, he takes 8, gives 2 to Alice
g.set_outcome(g.root.children[1].children[0], g.add_outcome([2, 8], label="Bob takes after first push"))

# If Bob pushes, the piles double again: 4 and 16 coins, and it's Alice's turn.
g.append_move(g.root.children[1].children[1], "Alice", ["take", "push"])

# If Alice takes after the second push, she takes 16, gives 4 to Bob
g.set_outcome(g.root.children[1].children[1].children[0], g.add_outcome([16, 4], label="Alice takes after second push"))

# If Alice pushes, the piles double again: 8 and 32 coins, and it's Bob's turn for the last move.
g.append_move(g.root.children[1].children[1].children[1], "Bob", ["take", "push"])

# If Bob takes after the third push, he takes 32, gives 8 to Alice
g.set_outcome(g.root.children[1].children[1].children[1].children[0], g.add_outcome([8, 32], label="Bob takes after third push"))

# If Bob pushes for the final time, the piles double again: 16 and 64 coins.
# Since it's the end of the game, Alice takes the larger pile and Bob takes the smaller one.
g.set_outcome(g.root.children[1].children[1].children[1].children[1], g.add_outcome([64, 16], label="Final push"))

# Save the EFG
efg = g.write(format='native')
```

This code snippet systematically constructs the game tree for the described game scenario. It starts with Alice's initial decision and follows through the game's logic, detailing the outcomes of each decision point without using recursion, loops, or the "+" operator. Each decision point doubles the piles when "push" is chosen, and the game tree branches accordingly, with outcomes set based on the players' decisions to "take" or "push" the piles.