```python
import pygambit as gbt

# Create a new game with two players: Country A and Country B
g = gbt.Game.new_tree(players=["Country A", "Country B"], title="Diplomatic Strategy Game")

# Country B decides whether to Accept the status quo or Rebel
g.append_move(g.root, "Country B", ["Accept", "Rebel"])

# If Country B accepts, Country A can choose to continue to Tax or Drop Taxes
g.append_move(g.root.children[0], "Country A", ["Tax", "Drop Taxes"])
# Set outcomes for Country A's decisions after Country B accepts
g.set_outcome(g.root.children[0].children[0], g.add_outcome([6, -2], label="Tax"))
g.set_outcome(g.root.children[0].children[1], g.add_outcome([4, 0], label="Drop Taxes"))

# If Country B rebels, Country A can choose to Grant Independence or Suppress
g.append_move(g.root.children[1], "Country A", ["Grant Independence", "Suppress"])
# Set outcomes for granting independence
g.set_outcome(g.root.children[1].children[0], g.add_outcome([0, 3], label="Grant Independence"))

# For suppression, introduce a chance move to determine the outcome of the war
g.append_move(g.root.children[1].children[1], g.players.chance, ["B Wins", "B Loses"])
# Set probabilities for the outcomes of the war
g.set_chance_probs(g.root.children[1].children[1].infoset, [gbt.Rational(3, 10), gbt.Rational(7, 10)])
# Set outcomes for the war
g.set_outcome(g.root.children[1].children[1].children[0], g.add_outcome([-1, -3], label="B Wins War"))
g.set_outcome(g.root.children[1].children[1].children[1], g.add_outcome([-1, -5], label="B Loses War"))

# Save the EFG
efg = g.write(format='native')
```