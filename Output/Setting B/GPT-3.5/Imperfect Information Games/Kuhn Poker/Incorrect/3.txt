```python
import pygambit as gbt

# Create a new extensive-form game with two players Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Three-card game")

# Add a chance node to represent the allocation of the three cards with equal probability
g.append_move(g.root, g.players.chance, ["JQ", "JK", "QJ", "QK", "KJ", "KQ"])

# For each possible allocation of the cards, define the game structure
for node in g.root.children:
    # Alice can either check or bet 1 without knowing the allocation of the chance node
    g.append_move(node, "Alice", ["Check", "Bet 1"])
    # Bob can either check or bet 1 without knowing Alice's card
    g.append_move(node.children[0], "Bob", ["Check", "Bet 1"])
    g.append_move(node.children[0].children[1], "Alice", ["Fold", "Call"])
    g.append_move(node.children[0].children[1].children[1], "Bob", ["Fold", "Call"])
    g.append_move(node.children[0].children[1].children[1].children[1], "Alice", ["Fold", "Call"])
    g.append_move(node.children[0].children[1].children[1].children[1].children[1], "Bob", ["Fold", "Call"])
    g.append_move(node.children[0].children[1].children[1].children[1].children[1].children[1], "Alice", ["Fold", "Call"])
    g.append_move(node.children[0].children[1].children[1].children[1].children[1].children[1].children[1], "Bob", ["Fold", "Call"])
    g.append_move(node.children[0].children[1].children[1].children[1].children[1].children[1].children[1].children[1], "Alice", ["Fold", "Call"])
    g.append_move(node.children[0].children[1].children[1].children[1].children[1].children[1].children[1].children[1].children[1], "Bob", ["Fold", "Call"])

    # Set information sets for imperfect information
    g.set_infoset(node.children[0].children[1], node.children[0].children[1].children[1].infoset)
    g.set_infoset(node.children[0].children[1].children[1], node.children[0].children[1].children[1].children[1].infoset)
    g.set_infoset(node.children[0].children[1].children[1].children[1], node.children[0].children[1].children[1].children[1].children[1].infoset)
    g.set_infoset(node.children[0].children[1].children[1].children[1].children[1], node.children[0].children[1].children[1].children[1].children[1].children[1].infoset)
    g.set_infoset(node.children[0].children[1].children[1].children[1].children[1].children[1], node.children[0].children[1].children[1].children[1].children[1].children[1].children[1].infoset)
    g.set_infoset(node.children[0].children[1].children[1].children[1].children[1].children[1].children[1], node.children[0].children[1].children[1].children[1].children[1].children[1].children[1].children[1].infoset)

    # Define outcomes for different paths in the game
    alice_winsbig = g.add_outcome([2, -2], label="Alice wins big")
    alice_wins = g.add_outcome([1, -1], label="Alice wins")
    bob_winsbig = g.add_outcome([-2, 2], label="Bob wins big")
    bob_wins = g.add_outcome([-1, 1], label="Bob wins")
    g.set_outcome(node.children[0].children[1].children[1].children[1].children[1].children[1].children[1].children[1], alice_winsbig)
    g.set_outcome(node.children[0].children[1].children[1].children[1].children[1].children[1].children[1].children[1].children[1], alice_wins)
    g.set_outcome(node.children[0].children[1].children[1].children[1].children[1].children[1].children[1].children[1].children[1].children[1], bob_wins)
    g.set_outcome(node.children[0].children[1].children[1].children[1].children[1].children[1].children[1].children[1].children[1].children[1].children[1], bob_winsbig)

# Save the EFG
efg = g.write(format='native')
```
===================
Index out of range
Error in code generation. Trying again...

import pygambit as gbt

# Create a new extensive-form game with two players Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Three-card game")

# Add a chance node to represent the allocation of the three cards with equal probability
g.append_move(g.root, g.players.chance, ["JQ", "JK", "QJ", "QK", "KJ", "KQ"])

# For each possible allocation of the cards, define the game structure
for node in g.root.children:
    # Alice can either check or bet 1 without knowing the allocation of the chance node
    g.append_move(node, "Alice", ["Check", "Bet 1"])
    # Bob can either check or bet 1 without knowing Alice's card
    g.append_move(node.children[0], "Bob", ["Check", "Bet 1"])
    g.append_move(node.children[0].children[1], "Alice", ["Fold", "Call"])
    g.append_move(node.children[0].children[1].children[1], "Bob", ["Fold", "Call"])
    g.append_move(node.children[0].children[1].children[1].children[1], "Alice", ["Fold", "Call"])
    g.append_move(node.children[0].children[1].children[1].children[1].children[1], "Bob", ["Fold", "Call"])
    g.append_move(node.children[0].children[1].children[1].children[1].children[1].children[1], "Alice", ["Fold", "Call"])
    g.append_move(node.children[0].children[1].children[1].children[1].children[1].children[1].children[1], "Bob", ["Fold", "Call"])

    # Set information sets for imperfect information
    g.set_infoset(node.children[0].children[1], node.children[0].children[1].children[1].infoset)
    g.set_infoset(node.children[0].children[1].children[1], node.children[0].children[1].children[1].children[1].infoset)
    g.set_infoset(node.children[0].children[1].children[1].children[1], node.children[0].children[1].children[1].children[1].children[1].infoset)
    g.set_infoset(node.children[0].children[1].children[1].children[1].children[1], node.children[0].children[1].children[1].children[1].children[1].children[1].infoset)
    g.set_infoset(node.children[0].children[1].children[1].children[1].children[1].children[1], node.children[0].children[1].children[1].children[1].children[1].children[1].children[1].infoset)

    # Define outcomes for different paths in the game
    alice_winsbig = g.add_outcome([2, -2], label="Alice wins big")
    alice_wins = g.add_outcome([1, -1], label="Alice wins")
    bob_winsbig = g.add_outcome([-2, 2], label="Bob wins big")
    bob_wins = g.add_outcome([-1, 1], label="Bob wins")
    g.set_outcome(node.children[0].children[1].children[1].children[1].children[1].children[1], alice_winsbig)
    g.set_outcome(node.children[0].children[1].children[1].children[1].children[1].children[1].children[1], alice_wins)
    g.set_outcome(node.children[0].children[1].children[1].children[1].children[1].children[1].children[1].children[1], bob_wins)
    g.set_outcome(node.children[0].children[1].children[1].children[1].children[1].children[1].children[1].children[1].children[1], bob_winsbig)

# Save the EFG
efg = g.write(format='native')

===================
Index out of range
Error in code generation. Trying again...

import pygambit as gbt

# Create a new extensive-form game with two players Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Three-card game")

# Add a chance node to represent the allocation of the three cards with equal probability
g.append_move(g.root, g.players.chance, ["JQ", "JK", "QJ", "QK", "KJ", "KQ"])

# For each possible allocation of the cards, define the game structure
for node in g.root.children:
    # Alice can either check or bet 1 without knowing the allocation of the chance node
    g.append_move(node, "Alice", ["Check", "Bet 1"])
    # Bob can either check or bet 1 without knowing Alice's card
    g.append_move(node.children[0], "Bob", ["Check", "Bet 1"])
    g.append_move(node.children[0].children[1], "Alice", ["Fold", "Call"])
    g.append_move(node.children[0].children[1].children[1], "Bob", ["Fold", "Call"])

    # Set information sets for imperfect information
    g.set_infoset(node.children[0].children[1], node.children[0].children[1].children[1].infoset)

    # Define outcomes for different paths in the game
    alice_winsbig = g.add_outcome([2, -2], label="Alice wins big")
    alice_wins = g.add_outcome([1, -1], label="Alice wins")
    bob_winsbig = g.add_outcome([-2, 2], label="Bob wins big")
    bob_wins = g.add_outcome([-1, 1], label="Bob wins")
    g.set_outcome(node.children[0].children[1].children[1], alice_winsbig)
    g.set_outcome(node.children[0].children[1].children[1].children[1], alice_wins)
    g.set_outcome(node.children[0].children[1].children[1].children[1].children[1], bob_wins)
    g.set_outcome(node.children[0].children[1].children[1].children[1].children[1].children[1], bob_winsbig)

# Save the EFG
efg = g.write(format='native')

===================
Index out of range
Error in code generation. Trying again...

import pygambit as gbt

# Create a new extensive-form game with two players Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Three-card game")

# Add a chance node to represent the allocation of the three cards with equal probability
g.append_move(g.root, g.players.chance, ["JQ", "JK", "QJ", "QK", "KJ", "KQ"])

# For each possible allocation of the cards, define the game structure
for node in g.root.children:
    # Alice can either check or bet 1 without knowing the allocation of the chance node
    g.append_move(node, "Alice", ["Check", "Bet 1"])
    # Bob can either check or bet 1 without knowing Alice's card
    g.append_move(node.children[0], "Bob", ["Check", "Bet 1"])
    g.append_move(node.children[0].children[1], "Alice", ["Fold", "Call"])
    g.append_move(node.children[0].children[1].children[1], "Bob", ["Fold", "Call"])

    # Set information sets for imperfect information
    g.set_infoset(node.children[0].children[1], node.children[0].children[1].children[1].infoset)

    # Define outcomes for different paths in the game
    alice_winsbig = g.add_outcome([2, -2], label="Alice wins big")
    alice_wins = g.add_outcome([1, -1], label="Alice wins")
    bob_winsbig = g.add_outcome([-2, 2], label="Bob wins big")
    bob_wins = g.add_outcome([-1, 1], label="Bob wins")
    g.set_outcome(node.children[0].children[1].children[1], alice_winsbig)
    g.set_outcome(node.children[0].children[1].children[1].children[1], alice_wins)
    g.set_outcome(node.children[0].children[1].children[1].children[1].children[1], bob_wins)
    g.set_outcome(node.children[0].children[1].children[1].children[1].children[1].children[1], bob_winsbig)

# Save the EFG
efg = g.write(format='native')
