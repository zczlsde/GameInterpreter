```python
import pygambit as gbt

# Create a new extensive-form game with two players, Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"],
                    title="Stones game")

# Alice removes one or two stones
g.append_move(g.root, "Alice", ["Remove one stone", "Remove two stones"])
# Bob's move after Alice removes one stone
g.append_move(g.root.children[0], "Bob", ["Remove one stone", "Remove two stones"])
# Alice's move after Bob removes one stone
g.append_move(g.root.children[0].children[0], "Alice", ["Remove one stone", "Remove two stones"])
# Bob's move after Alice removes one stone again
g.append_move(g.root.children[0].children[0].children[0], "Bob", ["Remove one stone", "Remove two stones"])
# Alice's move after Bob removes one stone again
g.append_move(g.root.children[0].children[0].children[0].children[0], "Alice", ["Remove one stone", "Remove two stones"])
# Bob's move after Alice removes one stone and Bob removes one stone
g.append_move(g.root.children[0].children[0].children[0].children[0].children[0], "Bob", ["Remove one stone", "Remove two stones"])
# Alice's move after Bob removes one stone twice
g.append_move(g.root.children[0].children[0].children[0].children[0].children[1], "Alice", ["Remove one stone", "Remove two stones"])

# Bob's move after Alice removes one stone and Bob removes two stones
g.append_move(g.root.children[0].children[0].children[0].children[1], "Bob", ["Remove one stone", "Remove two stones"])
# Alice's move after Bob removes one stone
g.append_move(g.root.children[0].children[0].children[0].children[1].children[0], "Alice", ["Remove one stone", "Remove two stones"])
# Bob's move after Alice removes one stone and Bob removes two stones
g.append_move(g.root.children[0].children[0].children[0].children[1].children[0].children[0], "Bob", ["Remove one stone", "Remove two stones"])

# Alice's move after Bob removes two stones
g.append_move(g.root.children[0].children[0].children[1], "Alice", ["Remove one stone", "Remove two stones"])
# Bob's move after Alice removes one stone
g.append_move(g.root.children[0].children[0].children[1].children[0], "Bob", ["Remove one stone", "Remove two stones"])
# Alice's move after Bob removes one stone
g.append_move(g.root.children[0].children[0].children[1].children[0].children[0], "Alice", ["Remove one stone", "Remove two stones"])

# Set information sets for imperfect information
g.set_infoset(g.root.children[0].children[0].children[0].children[0].children[0], g.root.children[0].children[0].children[0].children[1].children[0].infoset)
g.set_infoset(g.root.children[0].children[0].children[0].children[1].children[0].children[0], g.root.children[0].children[0].children[0].children[1].children[0].infoset)

# Define outcomes for the game
alice_wins = g.add_outcome([1, -1], label="Alice wins")
bob_wins = g.add_outcome([-1, 1], label="Bob wins")

# Set outcomes for each possible path in the game
g.set_outcome(g.root.children[0].children[0].children[0].children[0].children[0].children[0], alice_wins)
g.set_outcome(g.root.children[0].children[0].children[0].children[0].children[0].children[1], bob_wins)
g.set_outcome(g.root.children[0].children[0].children[0].children[0].children[1], alice_wins)
g.set_outcome(g.root.children[0].children[0].children[0].children[1].children[0].children[0], alice_wins)
g.set_outcome(g.root.children[0].children[0].children[1].children[0].children[0].children[0], bob_wins)
g.set_outcome(g.root.children[0].children[0].children[1].children[0].children[0].children[1], alice_wins)

# Save the EFG
efg = g.write(format='native')
```