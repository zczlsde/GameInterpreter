```python
import pygambit as gbt

# Create a new extensive-form game with two players, Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Coin Pile Game")

# Alice's first move: take or push
g.append_move(g.root, "Alice", ["Take", "Push"])

# Bob's move after Alice's take: take or push
g.append_move(g.root.children[0], "Bob", ["Take", "Push"])

# Alice's move after Bob's push: take or push
g.append_move(g.root.children[0].children[1], "Alice", ["Take", "Push"])

# Bob's final move after Alice's push: take or push (final push doubles the piles)
g.append_move(g.root.children[0].children[1].children[1], "Bob", ["Take", "Push"])

# Set information sets for the nodes
g.set_infoset(g.root.children[0], g.root.children[0].children[1].infoset)
g.set_infoset(g.root.children[0].children[1], g.root.children[0].children[1].children[1].infoset)

# Define the outcomes for the game
alice_takes_high = g.add_outcome([4, 1], label="Alice takes high pile")
bob_takes_high = g.add_outcome([1, 4], label="Bob takes high pile")
alice_takes_low = g.add_outcome([1, 4], label="Alice takes low pile")
bob_takes_low = g.add_outcome([4, 1], label="Bob takes low pile")

# Set outcomes for each possible path in the game
g.set_outcome(g.root.children[0].children[0], alice_takes_high)
g.set_outcome(g.root.children[0].children[1].children[0], bob_takes_high)
g.set_outcome(g.root.children[0].children[1].children[1].children[0], alice_takes_low)
g.set_outcome(g.root.children[0].children[1].children[1].children[1], bob_takes_low)

# Save the EFG
efg = g.write(format='native')
```