```python
import pygambit as gbt

# Create a new game tree with players Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"],
                      title="Three-card game between Alice and Bob")

# Add a chance node to represent the allocation of cards with equal probabilities
g.append_move(g.root, g.players.chance, ["JQ", "JK", "QJ", "QK", "KJ", "KQ"])

# Alice's decision node after observing her card
for node in g.root.children:
    g.append_move(node, "Alice", ["Check", "Bet"])

# Bob's decision node after Alice's decision
for node in g.root.children:
    g.append_move(node.children[0], "Bob", ["Check", "Bet"])
    g.append_move(node.children[1], "Bob", ["Fold", "Call"])

# Set information sets for nodes with simultaneous moves
g.set_infoset(g.root.children[0].children[1], g.root.children[1].children[1].infoset)
g.set_infoset(g.root.children[1].children[1], g.root.children[0].children[1].infoset)

# Define outcomes for different game endings
alice_winsbig = g.add_outcome([2, -2], label="Alice wins big")
alice_wins = g.add_outcome([1, -1], label="Alice wins")
bob_winsbig = g.add_outcome([-2, 2], label="Bob wins big")
bob_wins = g.add_outcome([-1, 1], label="Bob wins")

# Set outcomes for different paths in the game tree
g.set_outcome(g.root.children[0].children[0].children[0], alice_winsbig)  # Alice checks, Bob checks
g.set_outcome(g.root.children[0].children[0].children[1], alice_wins)  # Alice checks, Bob bets, Alice calls
g.set_outcome(g.root.children[0].children[1].children[0], bob_winsbig)  # Alice bets, Bob folds
g.set_outcome(g.root.children[0].children[1].children[1], alice_wins)  # Alice bets, Bob calls

# Save the EFG
efg = g.write(format='native')
```