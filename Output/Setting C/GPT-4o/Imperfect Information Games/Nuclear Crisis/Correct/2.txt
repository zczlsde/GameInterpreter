```python
# Step 1: Country A makes the first decision to either escalate (E) or ignore (I).
# Step 2: If Country A escalates, Country B then decides to either back down (B) or escalate further (E).
# Step 3: If both escalate, Country A decides between retreating (R) or detonating (D).
# Step 4: Country B, unaware of Country A's decision, decides between retreating (R) or detonating (D).

# Step 5: Since Country B is unaware of Country A's decision in Step 3, we need to group Country B's decision nodes in the same information set.

# Grouping Country B's decision nodes in the same information set
g.set_infoset(g.root.children[0].children[1].children[0], g.root.children[0].children[1].children[1].infoset)
```

```python
import pygambit as gbt

# Create a new extensive-form game with two players: Country A and Country B
g = gbt.Game.new_tree(players=["Country A", "Country B"],
                      title="Nuclear Crisis Game")

# Step 1: Country A makes the first decision to either escalate (E) or ignore (I).
g.append_move(g.root, "Country A", ["Escalate", "Ignore"])

# Step 2: If Country A escalates, Country B then decides to either back down (B) or escalate further (E).
g.append_move(g.root.children[0], "Country B", ["Back down", "Escalate"])

# Step 3: If both escalate, Country A decides between retreating (R) or detonating (D).
g.append_move(g.root.children[0].children[1], "Country A", ["Retreat", "Detonate"])

# Step 4: Country B, unaware of Country A's decision, decides between retreating (R) or detonating (D).
g.append_move(g.root.children[0].children[1].children[0], "Country B", ["Retreat", "Detonate"])
g.append_move(g.root.children[0].children[1].children[1], "Country B", ["Retreat", "Detonate"])

# Step 5: Since Country B is unaware of Country A's decision in Step 3, we need to group Country B's decision nodes in the same information set.
g.set_infoset(g.root.children[0].children[1].children[0], g.root.children[0].children[1].children[1].infoset)

# Define the outcomes for each terminal node
# If Country A ignores, both countries receive a small positive payoff
ignore_outcome = g.add_outcome([1, 1], label="Ignore Provocation")

# If Country A escalates and Country B backs down, Country A gains a small payoff, Country B loses a small payoff
escalate_backdown_outcome = g.add_outcome([2, -1], label="Escalate and Back Down")

# If both escalate and both retreat, both suffer a small negative payoff
both_retreat_outcome = g.add_outcome([-1, -1], label="Both Retreat")

# If Country A retreats and Country B detonates, Country A incurs a large negative payoff, Country B gains a large positive payoff
a_retreat_b_detonate_outcome = g.add_outcome([-10, 10], label="A Retreats, B Detonates")

# If Country A detonates and Country B retreats, Country A gains a large positive payoff, Country B incurs a large negative payoff
a_detonate_b_retreat_outcome = g.add_outcome([10, -10], label="A Detonates, B Retreats")

# If neither retreats, both suffer a very large negative payoff due to nuclear disaster
nuclear_disaster_outcome = g.add_outcome([-100, -100], label="Nuclear Disaster")

# Set the outcomes for each terminal node
g.set_outcome(g.root.children[1], ignore_outcome)
g.set_outcome(g.root.children[0].children[0], escalate_backdown_outcome)
g.set_outcome(g.root.children[0].children[1].children[0].children[0], both_retreat_outcome)
g.set_outcome(g.root.children[0].children[1].children[0].children[1], a_retreat_b_detonate_outcome)
g.set_outcome(g.root.children[0].children[1].children[1].children[0], a_detonate_b_retreat_outcome)
g.set_outcome(g.root.children[0].children[1].children[1].children[1], nuclear_disaster_outcome)

# Save the EFG
efg = g.write(format='native')
```