```python
# Step-by-step thought process:

# 1. The game begins with a chance node that determines the strength of the new manufacturer: strong (S) or weak (W).
# 2. The new manufacturer sends a signal, either strong (S) or weak (W), which is observed by the existing manufacturer.
# 3. The existing manufacturer does not know the actual strength of the new manufacturer, only the signal.
# 4. Therefore, the existing manufacturer has imperfect information about the new manufacturer's strength.
# 5. The decision nodes for the existing manufacturer are based on the signals received, not the actual strength.
# 6. We need to group the decision nodes for the existing manufacturer into information sets based on the signals.

# Grouping the decision nodes for the existing manufacturer based on the signals:
# - If the signal is strong, the existing manufacturer cannot distinguish between the new manufacturer being strong or weak.
# - If the signal is weak, the existing manufacturer cannot distinguish between the new manufacturer being strong or weak.

# Set the information sets for the existing manufacturer's decision nodes:
g.set_infoset(g.root.children[0].children[0], g.root.children[2].children[0].infoset)  # Strong signal
g.set_infoset(g.root.children[1].children[0], g.root.children[3].children[0].infoset)  # Weak signal
```

```python
import pygambit as gbt

# Create a new extensive-form game with two players: New Manufacturer and Existing Manufacturer
g = gbt.Game.new_tree(players=["New Manufacturer", "Existing Manufacturer"],
                      title="Market Entry Game with Imperfect Information")

# Step 1: The game begins with a chance node that determines the strength of the new manufacturer: strong (S) or weak (W).
# The probabilities are 2/3 for strong and 1/3 for weak.
g.append_move(g.root, g.players.chance, ["Strong", "Weak"])
g.set_chance_probs(g.root.infoset, [gbt.Rational(2, 3), gbt.Rational(1, 3)])

# Step 2: The new manufacturer sends a signal, either strong (S) or weak (W).
# This is observed by the existing manufacturer.
g.append_move(g.root.children[0], "New Manufacturer", ["Strong Signal", "Weak Signal"])
g.append_move(g.root.children[1], "New Manufacturer", ["Strong Signal", "Weak Signal"])

# Step 3: The existing manufacturer makes a decision based on the signal received.
# The existing manufacturer can choose to fight (F) or accommodate (A).
g.append_move(g.root.children[0].children[0], "Existing Manufacturer", ["Fight", "Accommodate"])
g.append_move(g.root.children[0].children[1], "Existing Manufacturer", ["Fight", "Accommodate"])
g.append_move(g.root.children[1].children[0], "Existing Manufacturer", ["Fight", "Accommodate"])
g.append_move(g.root.children[1].children[1], "Existing Manufacturer", ["Fight", "Accommodate"])

# Step 4: Set the information sets for the existing manufacturer's decision nodes.
# The existing manufacturer does not know the actual strength of the new manufacturer, only the signal.
# Group the decision nodes for the existing manufacturer based on the signals.
# - If the signal is strong, the existing manufacturer cannot distinguish between the new manufacturer being strong or weak.
# - If the signal is weak, the existing manufacturer cannot distinguish between the new manufacturer being strong or weak.
g.set_infoset(g.root.children[0].children[0], g.root.children[1].children[0].infoset)  # Strong signal
g.set_infoset(g.root.children[0].children[1], g.root.children[1].children[1].infoset)  # Weak signal

# Step 5: Set the payoffs for each scenario based on the actions taken by the players.
# If the new manufacturer is strong and sends a strong signal:
g.set_outcome(g.root.children[0].children[0].children[0], g.add_outcome([1, 0], label="Strong-Strong-Fight"))
g.set_outcome(g.root.children[0].children[0].children[1], g.add_outcome([3, 1], label="Strong-Strong-Accommodate"))

# If the new manufacturer is strong and sends a weak signal:
g.set_outcome(g.root.children[0].children[1].children[0], g.add_outcome([0, 0], label="Strong-Weak-Fight"))
g.set_outcome(g.root.children[0].children[1].children[1], g.add_outcome([2, 1], label="Strong-Weak-Accommodate"))

# If the new manufacturer is weak and sends a strong signal:
g.set_outcome(g.root.children[1].children[0].children[0], g.add_outcome([0, 2], label="Weak-Strong-Fight"))
g.set_outcome(g.root.children[1].children[0].children[1], g.add_outcome([2, 1], label="Weak-Strong-Accommodate"))

# If the new manufacturer is weak and sends a weak signal:
g.set_outcome(g.root.children[1].children[1].children[0], g.add_outcome([1, 2], label="Weak-Weak-Fight"))
g.set_outcome(g.root.children[1].children[1].children[1], g.add_outcome([3, 1], label="Weak-Weak-Accommodate"))

# Save the EFG
efg = g.write(format='native')
```