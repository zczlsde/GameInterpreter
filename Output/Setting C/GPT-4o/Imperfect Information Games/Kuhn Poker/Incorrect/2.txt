```python
# Step 1: Identify the possible outcomes of the chance node.
# There are six possible allocations of the cards: JQ, JK, QJ, QK, KJ, and KQ.
# These are represented as g.root.children[0] to g.root.children[5].

# Step 2: Determine Alice's decision nodes.
# Alice can check or bet without knowing Bob's card.
# Alice's decision nodes are grouped based on her card:
# - JQ (g.root.children[0]) and JK (g.root.children[1]) are grouped together.
# - QJ (g.root.children[2]) and QK (g.root.children[3]) are grouped together.
# - KJ (g.root.children[4]) and KQ (g.root.children[5]) are grouped together.

# Step 3: Set the information sets for Alice's decision nodes.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)  # Group JQ and JK
g.set_infoset(g.root.children[2], g.root.children[3].infoset)  # Group QJ and QK
g.set_infoset(g.root.children[4], g.root.children[5].infoset)  # Group KJ and KQ

# Step 4: Determine Bob's decision nodes.
# Bob can check or bet without knowing Alice's card.
# Bob's decision nodes are grouped based on his card:
# - QJ (g.root.children[2]) and KJ (g.root.children[4]) are grouped together.
# - JQ (g.root.children[0]) and KQ (g.root.children[5]) are grouped together.
# - JK (g.root.children[1]) and QK (g.root.children[3]) are grouped together.

# Step 5: Set the information sets for Bob's decision nodes.
g.set_infoset(g.root.children[2], g.root.children[4].infoset)  # Group QJ and KJ
g.set_infoset(g.root.children[0], g.root.children[5].infoset)  # Group JQ and KQ
g.set_infoset(g.root.children[1], g.root.children[3].infoset)  # Group JK and QK
```

```python
import pygambit as gbt

# Create a new extensive-form game with two players: Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Three-card poker game")

# Step 1: Identify the possible outcomes of the chance node.
# There are six possible allocations of the cards: JQ, JK, QJ, QK, KJ, and KQ.
# These are represented as g.root.children[0] to g.root.children[5].
g.append_move(g.root, g.players.chance, ["JQ", "JK", "QJ", "QK", "KJ", "KQ"])

# Set the probabilities for the chance node
probabilities = [gbt.Rational(1, 6)] * 6
g.set_chance_probs(g.root.infoset, probabilities)

# Step 2: Determine Alice's decision nodes.
# Alice can check or bet without knowing Bob's card.
# Alice's decision nodes are grouped based on her card:
# - JQ (g.root.children[0]) and JK (g.root.children[1]) are grouped together.
# - QJ (g.root.children[2]) and QK (g.root.children[3]) are grouped together.
# - KJ (g.root.children[4]) and KQ (g.root.children[5]) are grouped together.

# Alice's moves for each card allocation
g.append_move(g.root.children[0], "Alice", ["Check", "Bet"])
g.append_move(g.root.children[1], "Alice", ["Check", "Bet"])
g.append_move(g.root.children[2], "Alice", ["Check", "Bet"])
g.append_move(g.root.children[3], "Alice", ["Check", "Bet"])
g.append_move(g.root.children[4], "Alice", ["Check", "Bet"])
g.append_move(g.root.children[5], "Alice", ["Check", "Bet"])

# Step 3: Set the information sets for Alice's decision nodes.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)  # Group JQ and JK
g.set_infoset(g.root.children[2], g.root.children[3].infoset)  # Group QJ and QK
g.set_infoset(g.root.children[4], g.root.children[5].infoset)  # Group KJ and KQ

# Step 4: Determine Bob's decision nodes.
# Bob can check or bet without knowing Alice's card.
# Bob's decision nodes are grouped based on his card:
# - QJ (g.root.children[2]) and KJ (g.root.children[4]) are grouped together.
# - JQ (g.root.children[0]) and KQ (g.root.children[5]) are grouped together.
# - JK (g.root.children[1]) and QK (g.root.children[3]) are grouped together.

# Bob's moves for each scenario where Alice checks
g.append_move(g.root.children[0].children[0], "Bob", ["Check", "Bet"])
g.append_move(g.root.children[1].children[0], "Bob", ["Check", "Bet"])
g.append_move(g.root.children[2].children[0], "Bob", ["Check", "Bet"])
g.append_move(g.root.children[3].children[0], "Bob", ["Check", "Bet"])
g.append_move(g.root.children[4].children[0], "Bob", ["Check", "Bet"])
g.append_move(g.root.children[5].children[0], "Bob", ["Check", "Bet"])

# Bob's moves for each scenario where Alice bets
g.append_move(g.root.children[0].children[1], "Bob", ["Fold", "Call"])
g.append_move(g.root.children[1].children[1], "Bob", ["Fold", "Call"])
g.append_move(g.root.children[2].children[1], "Bob", ["Fold", "Call"])
g.append_move(g.root.children[3].children[1], "Bob", ["Fold", "Call"])
g.append_move(g.root.children[4].children[1], "Bob", ["Fold", "Call"])
g.append_move(g.root.children[5].children[1], "Bob", ["Fold", "Call"])

# Step 5: Set the information sets for Bob's decision nodes.
g.set_infoset(g.root.children[2], g.root.children[4].infoset)  # Group QJ and KJ
g.set_infoset(g.root.children[0], g.root.children[5].infoset)  # Group JQ and KQ
g.set_infoset(g.root.children[1], g.root.children[3].infoset)  # Group JK and QK

# Define outcomes for the game
alice_wins_1 = g.add_outcome([1, -1], label="Alice wins 1")
bob_wins_1 = g.add_outcome([-1, 1], label="Bob wins 1")
alice_wins_2 = g.add_outcome([2, -2], label="Alice wins 2")
bob_wins_2 = g.add_outcome([-2, 2], label="Bob wins 2")

# Set outcomes for each terminal node
# Alice checks, Bob checks
g.set_outcome(g.root.children[0].children[0].children[0], bob_wins_1)  # JQ
g.set_outcome(g.root.children[1].children[0].children[0], bob_wins_1)  # JK
g.set_outcome(g.root.children[2].children[0].children[0], alice_wins_1)  # QJ
g.set_outcome(g.root.children[3].children[0].children[0], bob_wins_1)  # QK
g.set_outcome(g.root.children[4].children[0].children[0], alice_wins_1)  # KJ
g.set_outcome(g.root.children[5].children[0].children[0], alice_wins_1)  # KQ

# Alice checks, Bob bets, Alice folds
g.set_outcome(g.root.children[0].children[0].children[1].children[0], bob_wins_1)  # JQ
g.set_outcome(g.root.children[1].children[0].children[1].children[0], bob_wins_1)  # JK
g.set_outcome(g.root.children[2].children[0].children[1].children[0], bob_wins_1)  # QJ
g.set_outcome(g.root.children[3].children[0].children[1].children[0], bob_wins_1)  # QK
g.set_outcome(g.root.children[4].children[0].children[1].children[0], bob_wins_1)  # KJ
g.set_outcome(g.root.children[5].children[0].children[1].children[0], bob_wins_1)  # KQ

# Alice checks, Bob bets, Alice calls
g.set_outcome(g.root.children[0].children[0].children[1].children[1], bob_wins_2)  # JQ
g.set_outcome(g.root.children[1].children[0].children[1].children[1], bob_wins_2)  # JK
g.set_outcome(g.root.children[2].children[0].children[1].children[1], alice_wins_2)  # QJ
g.set_outcome(g.root.children[3].children[0].children[1].children[1], bob_wins_2)  # QK
g.set_outcome(g.root.children[4].children[0].children[1].children[1], alice_wins_2)  # KJ
g.set_outcome(g.root.children[5].children[0].children[1].children[1], alice_wins_2)  # KQ

# Alice bets, Bob folds
g.set_outcome(g.root.children[0].children[1].children[0], alice_wins_1)  # JQ
g.set_outcome(g.root.children[1].children[1].children[0], alice_wins_1)  # JK
g.set_outcome(g.root.children[2].children[1].children[0], alice_wins_1)  # QJ
g.set_outcome(g.root.children[3].children[1].children[0], alice_wins_1)  # QK
g.set_outcome(g.root.children[4].children[1].children[0], alice_wins_1)  # KJ
g.set_outcome(g.root.children[5].children[1].children[0], alice_wins_1)  # KQ

# Alice bets, Bob calls
g.set_outcome(g.root.children[0].children[1].children[1], bob_wins_2)  # JQ
g.set_outcome(g.root.children[1].children[1].children[1], bob_wins_2)  # JK
g.set_outcome(g.root.children[2].children[1].children[1], alice_wins_2)  # QJ
g.set_outcome(g.root.children[3].children[1].children[1], bob_wins_2)  # QK
g.set_outcome(g.root.children[4].children[1].children[1], alice_wins_2)  # KJ
g.set_outcome(g.root.children[5].children[1].children[1], alice_wins_2)  # KQ

# Save the EFG
efg = g.write(format='native')
```
===================
Index out of range
Error in code generation. Trying again...

import pygambit as gbt

# Create a new extensive-form game with two players: Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Three-card poker game")

# Step 1: Identify the possible outcomes of the chance node.
# There are six possible allocations of the cards: JQ, JK, QJ, QK, KJ, and KQ.
# These are represented as g.root.children[0] to g.root.children[5].
g.append_move(g.root, g.players.chance, ["JQ", "JK", "QJ", "QK", "KJ", "KQ"])

# Set the probabilities for the chance node
probabilities = [gbt.Rational(1, 6)] * 6
g.set_chance_probs(g.root.infoset, probabilities)

# Step 2: Determine Alice's decision nodes.
# Alice can check or bet without knowing Bob's card.
# Alice's decision nodes are grouped based on her card:
# - JQ (g.root.children[0]) and JK (g.root.children[1]) are grouped together.
# - QJ (g.root.children[2]) and QK (g.root.children[3]) are grouped together.
# - KJ (g.root.children[4]) and KQ (g.root.children[5]) are grouped together.

# Alice's moves for each card allocation
for i in range(6):
    g.append_move(g.root.children[i], "Alice", ["Check", "Bet"])

# Step 3: Set the information sets for Alice's decision nodes.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)  # Group JQ and JK
g.set_infoset(g.root.children[2], g.root.children[3].infoset)  # Group QJ and QK
g.set_infoset(g.root.children[4], g.root.children[5].infoset)  # Group KJ and KQ

# Step 4: Determine Bob's decision nodes.
# Bob can check or bet without knowing Alice's card.
# Bob's decision nodes are grouped based on his card:
# - QJ (g.root.children[2]) and KJ (g.root.children[4]) are grouped together.
# - JQ (g.root.children[0]) and KQ (g.root.children[5]) are grouped together.
# - JK (g.root.children[1]) and QK (g.root.children[3]) are grouped together.

# Bob's moves for each scenario where Alice checks
for i in range(6):
    g.append_move(g.root.children[i].children[0], "Bob", ["Check", "Bet"])

# Bob's moves for each scenario where Alice bets
for i in range(6):
    g.append_move(g.root.children[i].children[1], "Bob", ["Fold", "Call"])

# Step 5: Set the information sets for Bob's decision nodes.
g.set_infoset(g.root.children[2].children[0], g.root.children[4].children[0].infoset)  # Group QJ and KJ
g.set_infoset(g.root.children[0].children[0], g.root.children[5].children[0].infoset)  # Group JQ and KQ
g.set_infoset(g.root.children[1].children[0], g.root.children[3].children[0].infoset)  # Group JK and QK

# Define outcomes for the game
alice_wins_1 = g.add_outcome([1, -1], label="Alice wins 1")
bob_wins_1 = g.add_outcome([-1, 1], label="Bob wins 1")
alice_wins_2 = g.add_outcome([2, -2], label="Alice wins 2")
bob_wins_2 = g.add_outcome([-2, 2], label="Bob wins 2")

# Set outcomes for each terminal node
# Alice checks, Bob checks
g.set_outcome(g.root.children[0].children[0].children[0], bob_wins_1)  # JQ
g.set_outcome(g.root.children[1].children[0].children[0], bob_wins_1)  # JK
g.set_outcome(g.root.children[2].children[0].children[0], alice_wins_1)  # QJ
g.set_outcome(g.root.children[3].children[0].children[0], bob_wins_1)  # QK
g.set_outcome(g.root.children[4].children[0].children[0], alice_wins_1)  # KJ
g.set_outcome(g.root.children[5].children[0].children[0], alice_wins_1)  # KQ

# Alice checks, Bob bets, Alice folds
g.set_outcome(g.root.children[0].children[0].children[1].children[0], bob_wins_1)  # JQ
g.set_outcome(g.root.children[1].children[0].children[1].children[0], bob_wins_1)  # JK
g.set_outcome(g.root.children[2].children[0].children[1].children[0], bob_wins_1)  # QJ
g.set_outcome(g.root.children[3].children[0].children[1].children[0], bob_wins_1)  # QK
g.set_outcome(g.root.children[4].children[0].children[1].children[0], bob_wins_1)  # KJ
g.set_outcome(g.root.children[5].children[0].children[1].children[0], bob_wins_1)  # KQ

# Alice checks, Bob bets, Alice calls
g.set_outcome(g.root.children[0].children[0].children[1].children[1], bob_wins_2)  # JQ
g.set_outcome(g.root.children[1].children[0].children[1].children[1], bob_wins_2)  # JK
g.set_outcome(g.root.children[2].children[0].children[1].children[1], alice_wins_2)  # QJ
g.set_outcome(g.root.children[3].children[0].children[1].children[1], bob_wins_2)  # QK
g.set_outcome(g.root.children[4].children[0].children[1].children[1], alice_wins_2)  # KJ
g.set_outcome(g.root.children[5].children[0].children[1].children[1], alice_wins_2)  # KQ

# Alice bets, Bob folds
g.set_outcome(g.root.children[0].children[1].children[0], alice_wins_1)  # JQ
g.set_outcome(g.root.children[1].children[1].children[0], alice_wins_1)  # JK
g.set_outcome(g.root.children[2].children[1].children[0], alice_wins_1)  # QJ
g.set_outcome(g.root.children[3].children[1].children[0], alice_wins_1)  # QK
g.set_outcome(g.root.children[4].children[1].children[0], alice_wins_1)  # KJ
g.set_outcome(g.root.children[5].children[1].children[0], alice_wins_1)  # KQ

# Alice bets, Bob calls
g.set_outcome(g.root.children[0].children[1].children[1], bob_wins_2)  # JQ
g.set_outcome(g.root.children[1].children[1].children[1], bob_wins_2)  # JK
g.set_outcome(g.root.children[2].children[1].children[1], alice_wins_2)  # QJ
g.set_outcome(g.root.children[3].children[1].children[1], bob_wins_2)  # QK
g.set_outcome(g.root.children[4].children[1].children[1], alice_wins_2)  # KJ
g.set_outcome(g.root.children[5].children[1].children[1], alice_wins_2)  # KQ

# Save the EFG
efg = g.write(format='native')

===================
Index out of range
Error in code generation. Trying again...

import pygambit as gbt

# Create a new extensive-form game with two players: Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Three-card poker game")

# Step 1: Identify the possible outcomes of the chance node.
# There are six possible allocations of the cards: JQ, JK, QJ, QK, KJ, and KQ.
# These are represented as g.root.children[0] to g.root.children[5].
g.append_move(g.root, g.players.chance, ["JQ", "JK", "QJ", "QK", "KJ", "KQ"])

# Set the probabilities for the chance node
probabilities = [gbt.Rational(1, 6)] * 6
g.set_chance_probs(g.root.infoset, probabilities)

# Step 2: Determine Alice's decision nodes.
# Alice can check or bet without knowing Bob's card.
# Alice's decision nodes are grouped based on her card:
# - JQ (g.root.children[0]) and JK (g.root.children[1]) are grouped together.
# - QJ (g.root.children[2]) and QK (g.root.children[3]) are grouped together.
# - KJ (g.root.children[4]) and KQ (g.root.children[5]) are grouped together.

# Alice's moves for each card allocation
for i in range(6):
    g.append_move(g.root.children[i], "Alice", ["Check", "Bet"])

# Step 3: Set the information sets for Alice's decision nodes.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)  # Group JQ and JK
g.set_infoset(g.root.children[2], g.root.children[3].infoset)  # Group QJ and QK
g.set_infoset(g.root.children[4], g.root.children[5].infoset)  # Group KJ and KQ

# Step 4: Determine Bob's decision nodes.
# Bob can check or bet without knowing Alice's card.
# Bob's decision nodes are grouped based on his card:
# - QJ (g.root.children[2]) and KJ (g.root.children[4]) are grouped together.
# - JQ (g.root.children[0]) and KQ (g.root.children[5]) are grouped together.
# - JK (g.root.children[1]) and QK (g.root.children[3]) are grouped together.

# Bob's moves for each scenario where Alice checks
for i in range(6):
    g.append_move(g.root.children[i].children[0], "Bob", ["Check", "Bet"])

# Bob's moves for each scenario where Alice bets
for i in range(6):
    g.append_move(g.root.children[i].children[1], "Bob", ["Fold", "Call"])

# Step 5: Set the information sets for Bob's decision nodes.
g.set_infoset(g.root.children[2].children[0], g.root.children[4].children[0].infoset)  # Group QJ and KJ
g.set_infoset(g.root.children[0].children[0], g.root.children[5].children[0].infoset)  # Group JQ and KQ
g.set_infoset(g.root.children[1].children[0], g.root.children[3].children[0].infoset)  # Group JK and QK

# Define outcomes for the game
alice_wins_1 = g.add_outcome([1, -1], label="Alice wins 1")
bob_wins_1 = g.add_outcome([-1, 1], label="Bob wins 1")
alice_wins_2 = g.add_outcome([2, -2], label="Alice wins 2")
bob_wins_2 = g.add_outcome([-2, 2], label="Bob wins 2")

# Set outcomes for each terminal node
# Alice checks, Bob checks
g.set_outcome(g.root.children[0].children[0].children[0], bob_wins_1)  # JQ
g.set_outcome(g.root.children[1].children[0].children[0], bob_wins_1)  # JK
g.set_outcome(g.root.children[2].children[0].children[0], alice_wins_1)  # QJ
g.set_outcome(g.root.children[3].children[0].children[0], bob_wins_1)  # QK
g.set_outcome(g.root.children[4].children[0].children[0], alice_wins_1)  # KJ
g.set_outcome(g.root.children[5].children[0].children[0], alice_wins_1)  # KQ

# Alice checks, Bob bets, Alice folds
g.set_outcome(g.root.children[0].children[0].children[1].children[0], bob_wins_1)  # JQ
g.set_outcome(g.root.children[1].children[0].children[1].children[0], bob_wins_1)  # JK
g.set_outcome(g.root.children[2].children[0].children[1].children[0], bob_wins_1)  # QJ
g.set_outcome(g.root.children[3].children[0].children[1].children[0], bob_wins_1)  # QK
g.set_outcome(g.root.children[4].children[0].children[1].children[0], bob_wins_1)  # KJ
g.set_outcome(g.root.children[5].children[0].children[1].children[0], bob_wins_1)  # KQ

# Alice checks, Bob bets, Alice calls
g.set_outcome(g.root.children[0].children[0].children[1].children[1], bob_wins_2)  # JQ
g.set_outcome(g.root.children[1].children[0].children[1].children[1], bob_wins_2)  # JK
g.set_outcome(g.root.children[2].children[0].children[1].children[1], alice_wins_2)  # QJ
g.set_outcome(g.root.children[3].children[0].children[1].children[1], bob_wins_2)  # QK
g.set_outcome(g.root.children[4].children[0].children[1].children[1], alice_wins_2)  # KJ
g.set_outcome(g.root.children[5].children[0].children[1].children[1], alice_wins_2)  # KQ

# Alice bets, Bob folds
g.set_outcome(g.root.children[0].children[1].children[0], alice_wins_1)  # JQ
g.set_outcome(g.root.children[1].children[1].children[0], alice_wins_1)  # JK
g.set_outcome(g.root.children[2].children[1].children[0], alice_wins_1)  # QJ
g.set_outcome(g.root.children[3].children[1].children[0], alice_wins_1)  # QK
g.set_outcome(g.root.children[4].children[1].children[0], alice_wins_1)  # KJ
g.set_outcome(g.root.children[5].children[1].children[0], alice_wins_1)  # KQ

# Alice bets, Bob calls
g.set_outcome(g.root.children[0].children[1].children[1], bob_wins_2)  # JQ
g.set_outcome(g.root.children[1].children[1].children[1], bob_wins_2)  # JK
g.set_outcome(g.root.children[2].children[1].children[1], alice_wins_2)  # QJ
g.set_outcome(g.root.children[3].children[1].children[1], bob_wins_2)  # QK
g.set_outcome(g.root.children[4].children[1].children[1], alice_wins_2)  # KJ
g.set_outcome(g.root.children[5].children[1].children[1], alice_wins_2)  # KQ

# Save the EFG
efg = g.write(format='native')

===================
Index out of range
Error in code generation. Trying again...

import pygambit as gbt

# Create a new extensive-form game with two players: Alice and Bob
g = gbt.Game.new_tree(players=["Alice", "Bob"], title="Three-card poker game")

# Step 1: Identify the possible outcomes of the chance node.
# There are six possible allocations of the cards: JQ, JK, QJ, QK, KJ, and KQ.
# These are represented as g.root.children[0] to g.root.children[5].
g.append_move(g.root, g.players.chance, ["JQ", "JK", "QJ", "QK", "KJ", "KQ"])

# Set the probabilities for the chance node
probabilities = [gbt.Rational(1, 6)] * 6
g.set_chance_probs(g.root.infoset, probabilities)

# Step 2: Determine Alice's decision nodes.
# Alice can check or bet without knowing Bob's card.
# Alice's decision nodes are grouped based on her card:
# - JQ (g.root.children[0]) and JK (g.root.children[1]) are grouped together.
# - QJ (g.root.children[2]) and QK (g.root.children[3]) are grouped together.
# - KJ (g.root.children[4]) and KQ (g.root.children[5]) are grouped together.

# Alice's moves for each card allocation
for i in range(6):
    g.append_move(g.root.children[i], "Alice", ["Check", "Bet"])

# Step 3: Set the information sets for Alice's decision nodes.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)  # Group JQ and JK
g.set_infoset(g.root.children[2], g.root.children[3].infoset)  # Group QJ and QK
g.set_infoset(g.root.children[4], g.root.children[5].infoset)  # Group KJ and KQ

# Step 4: Determine Bob's decision nodes.
# Bob can check or bet without knowing Alice's card.
# Bob's decision nodes are grouped based on his card:
# - QJ (g.root.children[2]) and KJ (g.root.children[4]) are grouped together.
# - JQ (g.root.children[0]) and KQ (g.root.children[5]) are grouped together.
# - JK (g.root.children[1]) and QK (g.root.children[3]) are grouped together.

# Bob's moves for each scenario where Alice checks
for i in range(6):
    g.append_move(g.root.children[i].children[0], "Bob", ["Check", "Bet"])

# Bob's moves for each scenario where Alice bets
for i in range(6):
    g.append_move(g.root.children[i].children[1], "Bob", ["Fold", "Call"])

# Step 5: Set the information sets for Bob's decision nodes.
g.set_infoset(g.root.children[2].children[0], g.root.children[4].children[0].infoset)  # Group QJ and KJ
g.set_infoset(g.root.children[0].children[0], g.root.children[5].children[0].infoset)  # Group JQ and KQ
g.set_infoset(g.root.children[1].children[0], g.root.children[3].children[0].infoset)  # Group JK and QK

# Define outcomes for the game
alice_wins_1 = g.add_outcome([1, -1], label="Alice wins 1")
bob_wins_1 = g.add_outcome([-1, 1], label="Bob wins 1")
alice_wins_2 = g.add_outcome([2, -2], label="Alice wins 2")
bob_wins_2 = g.add_outcome([-2, 2], label="Bob wins 2")

# Set outcomes for each terminal node
# Alice checks, Bob checks
g.set_outcome(g.root.children[0].children[0].children[0], bob_wins_1)  # JQ
g.set_outcome(g.root.children[1].children[0].children[0], bob_wins_1)  # JK
g.set_outcome(g.root.children[2].children[0].children[0], alice_wins_1)  # QJ
g.set_outcome(g.root.children[3].children[0].children[0], bob_wins_1)  # QK
g.set_outcome(g.root.children[4].children[0].children[0], alice_wins_1)  # KJ
g.set_outcome(g.root.children[5].children[0].children[0], alice_wins_1)  # KQ

# Alice checks, Bob bets, Alice folds
g.set_outcome(g.root.children[0].children[0].children[1].children[0], bob_wins_1)  # JQ
g.set_outcome(g.root.children[1].children[0].children[1].children[0], bob_wins_1)  # JK
g.set_outcome(g.root.children[2].children[0].children[1].children[0], bob_wins_1)  # QJ
g.set_outcome(g.root.children[3].children[0].children[1].children[0], bob_wins_1)  # QK
g.set_outcome(g.root.children[4].children[0].children[1].children[0], bob_wins_1)  # KJ
g.set_outcome(g.root.children[5].children[0].children[1].children[0], bob_wins_1)  # KQ

# Alice checks, Bob bets, Alice calls
g.set_outcome(g.root.children[0].children[0].children[1].children[1], bob_wins_2)  # JQ
g.set_outcome(g.root.children[1].children[0].children[1].children[1], bob_wins_2)  # JK
g.set_outcome(g.root.children[2].children[0].children[1].children[1], alice_wins_2)  # QJ
g.set_outcome(g.root.children[3].children[0].children[1].children[1], bob_wins_2)  # QK
g.set_outcome(g.root.children[4].children[0].children[1].children[1], alice_wins_2)  # KJ
g.set_outcome(g.root.children[5].children[0].children[1].children[1], alice_wins_2)  # KQ

# Alice bets, Bob folds
g.set_outcome(g.root.children[0].children[1].children[0], alice_wins_1)  # JQ
g.set_outcome(g.root.children[1].children[1].children[0], alice_wins_1)  # JK
g.set_outcome(g.root.children[2].children[1].children[0], alice_wins_1)  # QJ
g.set_outcome(g.root.children[3].children[1].children[0], alice_wins_1)  # QK
g.set_outcome(g.root.children[4].children[1].children[0], alice_wins_1)  # KJ
g.set_outcome(g.root.children[5].children[1].children[0], alice_wins_1)  # KQ

# Alice bets, Bob calls
g.set_outcome(g.root.children[0].children[1].children[1], bob_wins_2)  # JQ
g.set_outcome(g.root.children[1].children[1].children[1], bob_wins_2)  # JK
g.set_outcome(g.root.children[2].children[1].children[1], alice_wins_2)  # QJ
g.set_outcome(g.root.children[3].children[1].children[1], bob_wins_2)  # QK
g.set_outcome(g.root.children[4].children[1].children[1], alice_wins_2)  # KJ
g.set_outcome(g.root.children[5].children[1].children[1], alice_wins_2)  # KQ

# Save the EFG
efg = g.write(format='native')
