```python
# Step 1: Player 1 makes the first move with options A, B, or C.
# Step 2: Player 2 makes a decision without knowing Player 1's choice, so Player 2's decision nodes for each of Player 1's actions (A, B, C) should be in the same information set.
# Step 3: Player 1 makes another decision, but this time Player 1 knows their previous choice, so no need to group these nodes.
# Step 4: Player 3 makes a decision, and since Player 3 knows all previous actions, no need to group these nodes.

# Group Player 2's decision nodes into the same information set because Player 2 does not know Player 1's choice.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)  # Group decision nodes for Player 2 after Player 1's actions A and B
g.set_infoset(g.root.children[2], g.root.children[1].infoset)  # Group decision nodes for Player 2 after Player 1's actions C
```

```python
import pygambit as gbt

# Create a new extensive-form game with three players
g = gbt.Game.new_tree(players=["Player 1", "Player 2", "Player 3"],
                      title="Imperfect Information Game")

# Step 1: Player 1 makes the first move with options A, B, or C.
g.append_move(g.root, "Player 1", ["A", "B", "C"])

# Step 2: Player 2 makes a decision without knowing Player 1's choice.
# Player 2 has the same options D or E for each of Player 1's actions (A, B, C).
for node in g.root.children:
    g.append_move(node, "Player 2", ["D", "E"])

# Group Player 2's decision nodes into the same information set because Player 2 does not know Player 1's choice.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)  # Group decision nodes for Player 2 after Player 1's actions A and B
g.set_infoset(g.root.children[2], g.root.children[1].infoset)  # Group decision nodes for Player 2 after Player 1's actions C

# Step 3: Player 1 makes another decision, knowing their previous choice.
# Player 1 chooses between F or G for each of Player 2's actions (D, E).
for node in g.root.children:
    for child in node.children:
        g.append_move(child, "Player 1", ["F", "G"])

# Step 4: Player 3 makes a decision, knowing all previous actions.
# Player 3 chooses between Q or W for each of Player 1's actions (F, G).
for node in g.root.children:
    for child in node.children:
        for grandchild in child.children:
            g.append_move(grandchild, "Player 3", ["Q", "W"])

# Set the outcomes based on Player 3's decision
# If Player 3 selects Q, all players receive a payoff of 3.
# If Player 3 selects W, Player 1 and Player 2 each receive a payoff of 2, while Player 3 gets 3.
outcome_q = g.add_outcome([3, 3, 3], label="All players receive 3")
outcome_w = g.add_outcome([2, 2, 3], label="Player 1 and 2 receive 2, Player 3 receives 3")

for node in g.root.children:
    for child in node.children:
        for grandchild in child.children:
            g.set_outcome(grandchild.children[0], outcome_q)  # Outcome for Player 3 choosing Q
            g.set_outcome(grandchild.children[1], outcome_w)  # Outcome for Player 3 choosing W

# Save the EFG
efg = g.write(format='native')
```