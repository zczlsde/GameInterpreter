```python
# Since Player 2 makes a decision without knowing Player 1's choice,
# all of Player 2's decision nodes (rock, paper, scissors) are in the same information set.
# Assume Player 1's decisions lead to Player 2's decision nodes as follows:
# Player 1 chooses rock -> Player 2's decision nodes start from g.root.children[0]
# Player 1 chooses paper -> Player 2's decision nodes start from g.root.children[1]
# Player 1 chooses scissors -> Player 2's decision nodes start from g.root.children[2]
# Player 2 cannot distinguish between these scenarios when making a decision,
# so we group Player 2's decision nodes under the same information set.

g.set_infoset(g.root.children[0], g.root.children[1].infoset) # Group Player 2's decision node for paper with rock's infoset
g.set_infoset(g.root.children[2], g.root.children[1].infoset) # Group Player 2's decision node for scissors with the same infoset as paper and rock
```

```python
import pygambit as gbt

# Create a new game with two players
g = gbt.Game.new_tree(players=["Player 1", "Player 2"], title="Rock, Paper, Scissors Game")

# Player 1 moves first, choosing between Rock, Paper, or Scissors
g.append_move(g.root, "Player 1", ["Rock", "Paper", "Scissors"])

# For each of Player 1's choices, Player 2 then chooses between Rock, Paper, or Scissors
# These moves are added under each of Player 1's choices, creating a new decision node for Player 2 under each scenario
for node in g.root.children:
    g.append_move(node, "Player 2", ["Rock", "Paper", "Scissors"])

# Define the outcomes for each combination of choices
# The outcomes are defined based on the rules: Rock beats Scissors, Scissors beats Paper, and Paper beats Rock
# The payoffs are set as follows: a win results in a payoff of 1, a loss results in a payoff of -1, and a tie results in a payoff of 0 for both players
outcomes = {
    "RockRock": [0, 0], "RockPaper": [-1, 1], "RockScissors": [1, -1],
    "PaperRock": [1, -1], "PaperPaper": [0, 0], "PaperScissors": [-1, 1],
    "ScissorsRock": [-1, 1], "ScissorsPaper": [1, -1], "ScissorsScissors": [0, 0]
}

# Assign outcomes to each terminal node based on the combination of choices
for i, p1_choice in enumerate(["Rock", "Paper", "Scissors"]):
    for j, p2_choice in enumerate(["Rock", "Paper", "Scissors"]):
        outcome_label = p1_choice + p2_choice
        g.set_outcome(g.root.children[i].children[j], g.add_outcome(outcomes[outcome_label], label=outcome_label))

# Since Player 2 makes a decision without knowing Player 1's choice,
# all of Player 2's decision nodes (rock, paper, scissors) are in the same information set.
# Assume Player 1's decisions lead to Player 2's decision nodes as follows:
# Player 1 chooses rock -> Player 2's decision nodes start from g.root.children[0]
# Player 1 chooses paper -> Player 2's decision nodes start from g.root.children[1]
# Player 1 chooses scissors -> Player 2's decision nodes start from g.root.children[2]
# Player 2 cannot distinguish between these scenarios when making a decision,
# so we group Player 2's decision nodes under the same information set.

g.set_infoset(g.root.children[0], g.root.children[1].infoset) # Group Player 2's decision node for paper with rock's infoset
g.set_infoset(g.root.children[2], g.root.children[1].infoset) # Group Player 2's decision node for scissors with the same infoset as paper and rock

# Save the EFG
efg = g.write(format='native')
```