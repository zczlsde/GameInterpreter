```python
# Since Country B moves first with a choice between "Accept" and "Rebel", there's no need for an information set for Country B's initial move.
# However, after Country B decides to "Rebel", Country A's decision to "Grant Independence" or "Suppress" leads to a chance node for the war outcome.
# The outcomes of the war (Country B winning or losing) are not directly decisions by Country A or B, but they affect the payoffs significantly.
# Country A's decision to "Tax" or "Drop Taxes" after Country B "Accepts" does not involve imperfect information as it follows Country B's known decision.
# The chance node after "Suppress" represents a situation with imperfect information for both countries regarding the outcome, but it's not a decision node, so it doesn't require grouping into information sets.
# Therefore, in this scenario, there are no decision nodes for either player that require grouping into the same information set based on the given description and the nature of imperfect information present.

# Note: The game described does not have decision nodes under imperfect information that require the use of set_infoset() as per the task's requirement.
# Imperfect information arises from the chance node after Country B decides to "Rebel" and Country A chooses to "Suppress", but this is handled by setting probabilities for outcomes, not by grouping decision nodes into information sets.
```

```python
import pygambit as gbt

# Create a new extensive-form game with two players: Country A and Country B
g = gbt.Game.new_tree(players=["Country A", "Country B"], title="Diplomatic Strategy Game")

# Country B moves first with a choice between "Accept" and "Rebel"
g.append_move(g.root, "Country B", ["Accept", "Rebel"])

# If Country B accepts, Country A decides whether to "Tax" or "Drop Taxes"
g.append_move(g.root.children[0], "Country A", ["Tax", "Drop Taxes"])
# Setting outcomes for Country A's decision after Country B accepts
g.set_outcome(g.root.children[0].children[0], g.add_outcome([6, -2], label="Tax"))
g.set_outcome(g.root.children[0].children[1], g.add_outcome([4, 0], label="Drop Taxes"))

# If Country B rebels, Country A decides to "Grant Independence" or "Suppress"
g.append_move(g.root.children[1], "Country A", ["Grant Independence", "Suppress"])
# Setting outcome for granting independence
g.set_outcome(g.root.children[1].children[0], g.add_outcome([0, 3], label="Grant Independence"))

# If Country A attempts to suppress the rebellion, the outcome is determined by chance
# Adding a chance node for the war outcome
g.append_move(g.root.children[1].children[1], g.players.chance, ["B Wins", "B Loses"])
# Setting probabilities for the chance outcomes
g.set_chance_probs(g.root.children[1].children[1].infoset, [gbt.Rational(3, 10), gbt.Rational(7, 10)])
# Setting outcomes for the war determined by chance
g.set_outcome(g.root.children[1].children[1].children[0], g.add_outcome([-1, -3], label="B Wins War"))
g.set_outcome(g.root.children[1].children[1].children[1], g.add_outcome([-1, -5], label="B Loses War"))

# Save the EFG
efg = g.write(format='native')
```

This code snippet constructs an extensive-form game representing the strategic interactions between Country A and Country B, as described. It starts with Country B's decision to either accept the status quo or rebel. Depending on Country B's choice, Country A then makes decisions that lead to different outcomes, including a chance node representing the uncertain outcome of a war if Country A tries to suppress Country B's rebellion. The probabilities of winning or losing the war for Country B are set according to the given scenario, using `gbt.Rational` to accurately represent the fractional probabilities.