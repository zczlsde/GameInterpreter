```python
# Import the pygambit library
import pygambit as gbt

# Create a new game tree with 3 players
g = gbt.Game.new_tree(players=["Player 1", "Player 2", "Player 3"],
                      title="Multi-stage game with imperfect information")

# Add moves for Player 1 at the root node
g.append_move(g.root, "Player 1", ["A", "B", "C"])

# Add moves for Player 2 at the children of the root node
for node in g.root.children:
    g.append_move(node, "Player 2", ["D", "E"])

# Add moves for Player 1 at the grandchildren of the root node
for node in g.root.children:
    for child_node in node.children:
        g.append_move(child_node, "Player 1", ["F", "G"])

# Add moves for Player 3 at the great-grandchildren of the root node
for node in g.root.children:
    for child_node in node.children:
        for grandchild_node in child_node.children:
            g.append_move(grandchild_node, "Player 3", ["Q", "W"])

# Group the decision nodes for Player 1 in the same information set
g.set_infoset(g.root.children[0], g.root.children[1].infoset)
g.set_infoset(g.root.children[0], g.root.children[2].infoset)

# Group the decision nodes for Player 2 in the same information set
g.set_infoset(g.root.children[0].children[0], g.root.children[0].children[1].infoset)
g.set_infoset(g.root.children[0].children[0], g.root.children[0].children[2].infoset)
g.set_infoset(g.root.children[1].children[0], g.root.children[1].children[1].infoset)
g.set_infoset(g.root.children[1].children[0], g.root.children[1].children[2].infoset)
g.set_infoset(g.root.children[2].children[0], g.root.children[2].children[1].infoset)
g.set_infoset(g.root.children[2].children[0], g.root.children[2].children[2].infoset)

# Group the decision nodes for Player 3 in the same information set
g.set_infoset(g.root.children[0].children[0].children[0], g.root.children[0].children[0].children[1].infoset)
g.set_infoset(g.root.children[0].children[1].children[0], g.root.children[0].children[1].children[1].infoset)
g.set_infoset(g.root.children[0].children[2].children[0], g.root.children[0].children[2].children[1].infoset)
g.set_infoset(g.root.children[1].children[0].children[0], g.root.children[1].children[0].children[1].infoset)
g.set_infoset(g.root.children[1].children[1].children[0], g.root.children[1].children[1].children[1].infoset)
g.set_infoset(g.root.children[1].children[2].children[0], g.root.children[1].children[2].children[1].infoset)
g.set_infoset(g.root.children[2].children[0].children[0], g.root.children[2].children[0].children[1].infoset)
g.set_infoset(g.root.children[2].children[1].children[0], g.root.children[2].children[1].children[1].infoset)
g.set_infoset(g.root.children[2].children[2].children[0], g.root.children[2].children[2].children[1].infoset)
```

```python
# Import the pygambit library
import pygambit as gbt

# Create a new game tree with 3 players
g = gbt.Game.new_tree(players=["Player 1", "Player 2", "Player 3"],
                      title="Multi-stage game with imperfect information")

# Add moves for Player 1 at the root node
g.append_move(g.root, "Player 1", ["A", "B", "C"])

# Add moves for Player 2 at the children of the root node
g.append_move(g.root, "Player 2", ["D", "E"])

# Add moves for Player 1 at the grandchildren of the root node
g.append_move(g.root.children[0], "Player 1", ["F", "G"])

# Add moves for Player 3 at the great-grandchildren of the root node
g.append_move(g.root.children[0].children[0], "Player 3", ["Q", "W"])

# Group the decision nodes for Player 1 in the same information set
g.set_infoset(g.root.children[0], g.root.children[1].infoset)
g.set_infoset(g.root.children[0], g.root.children[2].infoset)

# Group the decision nodes for Player 2 in the same information set
g.set_infoset(g.root.children[0], g.root.children[1].infoset)

# Group the decision nodes for Player 3 in the same information set
g.set_infoset(g.root.children[0].children[0], g.root.children[0].children[1].infoset)

# Define the outcomes for the game
all_players_3 = g.add_outcome([3, 3, 3], label="All players receive 3")
player_1_2_receive_2 = g.add_outcome([2, 2, 3], label="Player 1 and Player 2 receive 2")
player_1_2_receive_2 = g.add_outcome([2, 2, 3], label="Player 1 and Player 2 receive 2")

# Set outcomes for the final stage based on Player 3's choice
g.set_outcome(g.root.children[0].children[0].children[0], all_players_3)
g.set_outcome(g.root.children[0].children[0].children[1], player_1_2_receive_2)

# Save the EFG
efg = g.write(format='native')
```
===================
append_move(): `nodes` must be terminal nodes
Error in code generation. Trying again...

# Import the pygambit library
import pygambit as gbt

# Create a new game tree with 3 players
g = gbt.Game.new_tree(players=["Player 1", "Player 2", "Player 3"],
                      title="Multi-stage game with imperfect information")

# Add moves for Player 1 at the root node
g.append_move(g.root, "Player 1", ["A", "B", "C"])

# Add moves for Player 2 at the children of the root node
for node in g.root.children:
    g.append_move(node, "Player 2", ["D", "E"])

# Add moves for Player 1 at the grandchildren of the root node
for node in g.root.children:
    for child_node in node.children:
        g.append_move(child_node, "Player 1", ["F", "G"])

# Add moves for Player 3 at the great-grandchildren of the root node
for node in g.root.children:
    for child_node in node.children:
        for grandchild_node in child_node.children:
            g.append_move(grandchild_node, "Player 3", ["Q", "W"])

# Group the decision nodes for Player 1 in the same information set
g.set_infoset(g.root.children[0], g.root.children[1].infoset)
g.set_infoset(g.root.children[0], g.root.children[2].infoset)

# Group the decision nodes for Player 2 in the same information set
for i in range(3):
    g.set_infoset(g.root.children[i].children[0], g.root.children[i].children[1].infoset)

# Group the decision nodes for Player 3 in the same information set
for i in range(3):
    for j in range(2):
        g.set_infoset(g.root.children[i].children[j].children[0], g.root.children[i].children[j].children[1].infoset)

# Define the outcomes for the game
all_players_3 = g.add_outcome([3, 3, 3], label="All players receive 3")
player_1_2_receive_2 = g.add_outcome([2, 2, 3], label="Player 1 and Player 2 receive 2")

# Set outcomes for the final stage based on Player 3's choice
for i in range(3):
    for j in range(2):
        g.set_outcome(g.root.children[i].children[j].children[0], all_players_3)
        g.set_outcome(g.root.children[i].children[j].children[1], player_1_2_receive_2)

# Save the EFG
efg = g.write(format='native')
