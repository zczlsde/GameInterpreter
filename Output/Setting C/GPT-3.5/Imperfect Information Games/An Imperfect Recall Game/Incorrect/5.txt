```python
# Import the necessary library
import pygambit as gbt

# Create a new game tree with two players
g = gbt.Game.new_tree(players=["Player 1", "Player 2"],
                    title="Three-stage imperfect information game")

# Add the chance node at the root with two outcomes "L" and "R"
g.append_move(g.root, g.players.chance, ["L", "R"])

# Add Player 1's decision nodes after the chance node
for node in g.root.children:
    g.append_move(node, "Player 1", ["l", "r"])

# Add Player 1's final decision nodes after observing the second stage
for node in g.root.children[0].children:
    g.append_move(node, "Player 1", ["A", "B"])
for node in g.root.children[1].children:
    g.append_move(node, "Player 1", ["A", "B"])

# Group the decision nodes of Player 1 in the same information set
g.set_infoset(g.root.children[0].children[0], g.root.children[1].children[0].infoset)
g.set_infoset(g.root.children[0].children[1], g.root.children[1].children[1].infoset)

# Save the EFG
efg = g.write(format='native')
```

```python
# Import the necessary library
import pygambit as gbt

# Create a new game tree with two players
g = gbt.Game.new_tree(players=["Player 1", "Player 2"],
                    title="Three-stage imperfect information game")

# Add the chance node at the root with two outcomes "L" and "R"
g.append_move(g.root, g.players.chance, ["L", "R"])

# Add Player 1's decision nodes after the chance node
g.append_move(g.root.children[0], "Player 1", ["l", "r"])
g.append_move(g.root.children[1], "Player 1", ["l", "r"])

# Add Player 1's final decision nodes after observing the second stage
g.append_move(g.root.children[0].children[0], "Player 1", ["A", "B"])
g.append_move(g.root.children[0].children[1], "Player 1", ["A", "B"])
g.append_move(g.root.children[1].children[0], "Player 1", ["A", "B"])
g.append_move(g.root.children[1].children[1], "Player 1", ["A", "B"])

# Group the decision nodes of Player 1 in the same information set
g.set_infoset(g.root.children[0].children[0], g.root.children[1].children[0].infoset)
g.set_infoset(g.root.children[0].children[1], g.root.children[1].children[1].infoset)

# Save the EFG
efg = g.write(format='native')
```