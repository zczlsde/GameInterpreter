```python
# Step 1: Identify the players and their actions.
# There are two players, each deciding independently between heads or tails.

# Step 2: Recognize the simultaneous nature of the game.
# Since both players make their decisions simultaneously, neither player knows the other's choice at the time of their decision.

# Step 3: Model the game with a sequential structure.
# Assume Player 1 moves first and Player 2 moves second for modeling purposes.

# Step 4: Identify the decision nodes for Player 2.
# Player 2's decision nodes are g.root.children[0] and g.root.children[1], corresponding to Player 1's actions (heads or tails).

# Step 5: Group Player 2's decision nodes in the same information set.
# Since Player 2 does not know Player 1's choice, these nodes should be in the same information set.

g.set_infoset(g.root.children[0], g.root.children[1].infoset)
```

```python
import pygambit as gbt

# Step 1: Create a new extensive-form game with two players, Player 1 and Player 2.
g = gbt.Game.new_tree(players=["Player 1", "Player 2"], title="Matching Pennies")

# Step 2: Model the game with a sequential structure for the purpose of representation.
# Assume Player 1 moves first and Player 2 moves second.

# Step 3: Append moves for Player 1. Player 1 can choose between "Heads" and "Tails".
g.append_move(g.root, "Player 1", ["Heads", "Tails"])

# Step 4: Append moves for Player 2. Player 2 can also choose between "Heads" and "Tails".
# Player 2's decision nodes are g.root.children[0] and g.root.children[1], corresponding to Player 1's actions.
g.append_move(g.root.children[0], "Player 2", ["Heads", "Tails"])
g.append_move(g.root.children[1], "Player 2", ["Heads", "Tails"])

# Step 5: Group Player 2's decision nodes in the same information set.
# Since Player 2 does not know Player 1's choice, these nodes should be in the same information set.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)

# Step 6: Define the outcomes for each possible combination of actions.
# If both players choose the same action, Player 1 wins and Player 2 loses.
# If the players choose different actions, Player 2 wins and Player 1 loses.

# Player 1 chooses Heads, Player 2 chooses Heads
outcome1 = g.add_outcome([1, -1], label="Player 1 wins")
g.set_outcome(g.root.children[0].children[0], outcome1)

# Player 1 chooses Heads, Player 2 chooses Tails
outcome2 = g.add_outcome([-1, 1], label="Player 2 wins")
g.set_outcome(g.root.children[0].children[1], outcome2)

# Player 1 chooses Tails, Player 2 chooses Heads
outcome3 = g.add_outcome([-1, 1], label="Player 2 wins")
g.set_outcome(g.root.children[1].children[0], outcome3)

# Player 1 chooses Tails, Player 2 chooses Tails
outcome4 = g.add_outcome([1, -1], label="Player 1 wins")
g.set_outcome(g.root.children[1].children[1], outcome4)

# Save the EFG
efg = g.write(format='native')
```