```python
# Step 1: Identify the players and their actions.
# There are two companies (players) in this game. Each company can either "Commit" to the partnership or "Develop Solo".

# Step 2: Determine the nature of the game.
# The game is simultaneous because both companies decide at the same time whether to commit or develop solo.

# Step 3: Model the game with a sequential structure.
# Assume Company 1 moves first and Company 2 moves second.

# Step 4: Identify the decision nodes.
# The starting node, g.root, is Company 1's decision node.
# Company 1 has two actions: "Commit" and "Develop Solo".
# Company 2's decision nodes are g.root.children[0] (Company 1 commits) and g.root.children[1] (Company 1 develops solo).

# Step 5: Determine the information set for Company 2.
# Since the companies move simultaneously, Company 2 does not know which action Company 1 has taken.
# Therefore, Company 2's decision nodes should be grouped in the same information set.

# Set the information set for Company 2's decision nodes.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)
```

```python
import pygambit as gbt

# Step 1: Create a new extensive-form game with two players, Company 1 and Company 2.
g = gbt.Game.new_tree(players=["Company 1", "Company 2"],
                      title="Strategic Alliance Game")

# Step 2: Model the game with a sequential structure.
# Assume Company 1 moves first and Company 2 moves second.

# Step 3: Append moves for Company 1.
# Company 1 has two actions: "Commit" and "Develop Solo".
g.append_move(g.root, "Company 1", ["Commit", "Develop Solo"])

# Step 4: Append moves for Company 2.
# Company 2 has two actions: "Commit" and "Develop Solo".
# Company 2's decision nodes are g.root.children[0] (Company 1 commits) and g.root.children[1] (Company 1 develops solo).
g.append_move(g.root.children[0], "Company 2", ["Commit", "Develop Solo"])
g.append_move(g.root.children[1], "Company 2", ["Commit", "Develop Solo"])

# Step 5: Set the information set for Company 2's decision nodes.
# Since the companies move simultaneously, Company 2 does not know which action Company 1 has taken.
# Therefore, Company 2's decision nodes should be grouped in the same information set.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)

# Step 6: Define the outcomes for each terminal node.
# If both commit, they each gain 5 points.
outcome_both_commit = g.add_outcome([5, 5], label="Both Commit")
# If Company 1 commits and Company 2 develops solo, Company 1 gets 0 and Company 2 gets 3.
outcome_c1_commit_c2_solo = g.add_outcome([0, 3], label="C1 Commit, C2 Solo")
# If Company 1 develops solo and Company 2 commits, Company 1 gets 3 and Company 2 gets 0.
outcome_c1_solo_c2_commit = g.add_outcome([3, 0], label="C1 Solo, C2 Commit")
# If both develop solo, they each gain 2 points.
outcome_both_solo = g.add_outcome([2, 2], label="Both Solo")

# Step 7: Set the outcomes for each terminal node.
g.set_outcome(g.root.children[0].children[0], outcome_both_commit)
g.set_outcome(g.root.children[0].children[1], outcome_c1_commit_c2_solo)
g.set_outcome(g.root.children[1].children[0], outcome_c1_solo_c2_commit)
g.set_outcome(g.root.children[1].children[1], outcome_both_solo)

# Save the EFG
efg = g.write(format='native')
```