```python
# Step 1: Identify the players and their actions.
# The couple consists of two players, Player 1 and Player 2.
# Both players have two actions: Adopt or Not Adopt.

# Step 2: Determine the structure of the game.
# Since the players make their decisions simultaneously, this game involves imperfect information.
# To model the game with a sequential structure, assume Player 1 moves first and Player 2 moves second.

# Step 3: Identify the decision nodes.
# The starting node, g.root, is Player 1's decision node.
# Player 1 has two actions, Adopt and Not Adopt.
# Player 2's decision nodes are g.root.children[0] (Adopt) and g.root.children[1] (Not Adopt).

# Step 4: Group the decision nodes into information sets.
# Player 2, moving simultaneously, does not know which action Player 1 has taken.
# Therefore, Player 2's decision nodes should be grouped in the same information set.

g.set_infoset(g.root.children[0], g.root.children[1].infoset)
```

```python
import pygambit as gbt

# Step 1: Identify the players and their actions.
# The couple consists of two players, Player 1 and Player 2.
# Both players have two actions: Adopt or Not Adopt.

# Step 2: Determine the structure of the game.
# Since the players make their decisions simultaneously, this game involves imperfect information.
# To model the game with a sequential structure, assume Player 1 moves first and Player 2 moves second.

# Create a new extensive-form game with two players.
g = gbt.Game.new_tree(players=["Player 1", "Player 2"],
                      title="Environmentally Friendly Habits Game")

# Step 3: Identify the decision nodes.
# The starting node, g.root, is Player 1's decision node.
# Player 1 has two actions, Adopt and Not Adopt.
g.append_move(g.root, "Player 1", ["Adopt", "Not Adopt"])

# Player 2's decision nodes are g.root.children[0] (Adopt) and g.root.children[1] (Not Adopt).
g.append_move(g.root.children[0], "Player 2", ["Adopt", "Not Adopt"])
g.append_move(g.root.children[1], "Player 2", ["Adopt", "Not Adopt"])

# Step 4: Group the decision nodes into information sets.
# Player 2, moving simultaneously, does not know which action Player 1 has taken.
# Therefore, Player 2's decision nodes should be grouped in the same information set.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)

# Step 5: Define the outcomes and payoffs.
# If both adopt, they share a sense of mutual accomplishment.
mutual_accomplishment = g.add_outcome([2, 2], label="Mutual Accomplishment")

# If one adopts and the other doesn't, the adopter incurs higher costs and feels a sense of betrayal.
betrayal_adopter = g.add_outcome([-1, 3], label="Betrayal Adopter")
betrayal_non_adopter = g.add_outcome([3, -1], label="Betrayal Non-Adopter")

# If neither adopts, they avoid the higher costs but risk feeling collective guilt.
collective_guilt = g.add_outcome([0, 0], label="Collective Guilt")

# Set the outcomes for each terminal node.
g.set_outcome(g.root.children[0].children[0], mutual_accomplishment)  # Both Adopt
g.set_outcome(g.root.children[0].children[1], betrayal_adopter)       # Player 1 Adopts, Player 2 Not Adopt
g.set_outcome(g.root.children[1].children[0], betrayal_non_adopter)   # Player 1 Not Adopt, Player 2 Adopts
g.set_outcome(g.root.children[1].children[1], collective_guilt)       # Both Not Adopt

# Save the EFG
efg = g.write(format='native')
```