```python
# Step 1: In the Matching Pennies game, both players choose their actions simultaneously.
# Step 2: To represent this in a sequential format, assume Player 1 moves first and Player 2 moves second.
# Step 3: Player 2's decision nodes are g.root.children[0] and g.root.children[1], corresponding to Player 1's actions.
# Step 4: Since Player 2 does not know Player 1's action, Player 2's decision nodes should be grouped in the same information set.

g.set_infoset(g.root.children[0], g.root.children[1].infoset)
```

```python
import pygambit as gbt

# Create a new extensive-form game with two players: Player 1 and Player 2
g = gbt.Game.new_tree(players=["Player 1", "Player 2"], title="Matching Pennies")

# Step 1: In the Matching Pennies game, both players choose their actions simultaneously.
# To represent this in a sequential format, assume Player 1 moves first and Player 2 moves second.

# Step 2: Player 1 makes the first move, choosing between "Heads" and "Tails".
g.append_move(g.root, "Player 1", ["Heads", "Tails"])

# Step 3: Player 2 makes a move after Player 1, choosing between "Heads" and "Tails".
# Player 2's decision nodes are g.root.children[0] and g.root.children[1], corresponding to Player 1's actions.
g.append_move(g.root.children[0], "Player 2", ["Heads", "Tails"])
g.append_move(g.root.children[1], "Player 2", ["Heads", "Tails"])

# Step 4: Since Player 2 does not know Player 1's action, Player 2's decision nodes should be grouped in the same information set.
# Use the provided code block to handle the imperfect information.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)

# Define the outcomes for the game
# If both players choose the same action, Player 1 wins 1 unit and Player 2 loses 1 unit.
# If the players choose different actions, Player 2 wins 1 unit and Player 1 loses 1 unit.

# Outcomes for Player 1 choosing "Heads"
outcome_heads_heads = g.add_outcome([1, -1], label="Player 1 wins")
outcome_heads_tails = g.add_outcome([-1, 1], label="Player 2 wins")

# Outcomes for Player 1 choosing "Tails"
outcome_tails_heads = g.add_outcome([-1, 1], label="Player 2 wins")
outcome_tails_tails = g.add_outcome([1, -1], label="Player 1 wins")

# Set the outcomes for each terminal node
g.set_outcome(g.root.children[0].children[0], outcome_heads_heads)
g.set_outcome(g.root.children[0].children[1], outcome_heads_tails)
g.set_outcome(g.root.children[1].children[0], outcome_tails_heads)
g.set_outcome(g.root.children[1].children[1], outcome_tails_tails)

# Save the EFG
efg = g.write(format='native')
```