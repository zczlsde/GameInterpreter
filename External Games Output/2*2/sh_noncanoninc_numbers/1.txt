```python
# Step 1: Identify the players and their actions.
# There are two chefs, Chef 1 and Chef 2, who can either Collaborate or Work Independently.

# Step 2: Determine the structure of the game.
# Since the chefs make their decisions simultaneously, this game involves imperfect information.

# Step 3: Model the game with a sequential structure.
# Assume Chef 1 moves first and Chef 2 moves second.

# Step 4: Identify the decision nodes.
# The starting node, g.root, is Chef 1's decision node.
# Chef 1 has two actions: Collaborate and Work Independently.
# Chef 2's decision nodes are g.root.children[0] and g.root.children[1], which correspond to Chef 1's actions.

# Step 5: Group Chef 2's decision nodes in the same information set.
# Chef 2, moving simultaneously, does not know which action Chef 1 has taken.
# Therefore, Chef 2's decision nodes should be grouped in the same information set.

g.set_infoset(g.root.children[0], g.root.children[1].infoset)
```

```python
import pygambit as gbt

# Step 1: Create a new extensive-form game with two players, Chef 1 and Chef 2.
g = gbt.Game.new_tree(players=["Chef 1", "Chef 2"], title="Cooking Show Competition")

# Step 2: Model the game with a sequential structure.
# Assume Chef 1 moves first and Chef 2 moves second.

# Step 3: Chef 1's decision node is the root of the game tree.
# Chef 1 has two actions: Collaborate and Work Independently.
g.append_move(g.root, "Chef 1", ["Collaborate", "Work Independently"])

# Step 4: Chef 2's decision nodes are the children of Chef 1's actions.
# Chef 2 also has two actions: Collaborate and Work Independently.
g.append_move(g.root.children[0], "Chef 2", ["Collaborate", "Work Independently"])
g.append_move(g.root.children[1], "Chef 2", ["Collaborate", "Work Independently"])

# Step 5: Group Chef 2's decision nodes in the same information set.
# Chef 2, moving simultaneously, does not know which action Chef 1 has taken.
# Therefore, Chef 2's decision nodes should be grouped in the same information set.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)

# Step 6: Define the outcomes for each terminal node.
# If both collaborate, each receives a promotion worth 3 points.
outcome_both_collaborate = g.add_outcome([3, 3], label="Both Collaborate")

# If one collaborates and the other works independently, the collaborator gains nothing, and the independent worker earns 2 points.
outcome_chef1_collaborates = g.add_outcome([0, 2], label="Chef 1 Collaborates")
outcome_chef2_collaborates = g.add_outcome([2, 0], label="Chef 2 Collaborates")

# If both work independently, each receives a low reward of 1 point.
outcome_both_independent = g.add_outcome([1, 1], label="Both Independent")

# Step 7: Assign the outcomes to the terminal nodes.
g.set_outcome(g.root.children[0].children[0], outcome_both_collaborate)
g.set_outcome(g.root.children[0].children[1], outcome_chef1_collaborates)
g.set_outcome(g.root.children[1].children[0], outcome_chef2_collaborates)
g.set_outcome(g.root.children[1].children[1], outcome_both_independent)

# Save the EFG
efg = g.write(format='native')
```