```python
# Step 1: Identify the players and their actions.
# There are two players, Corporation 1 and Corporation 2.
# Both players have two actions: Engage in espionage or Refrain.

# Step 2: Determine the structure of the game.
# Since both players decide simultaneously, this game involves imperfect information.
# To model the game with a sequential structure, assume Corporation 1 moves first and Corporation 2 moves second.

# Step 3: Identify the decision nodes.
# The starting node, g.root, is Corporation 1's decision node.
# Corporation 1 has two actions, Engage and Refrain.
# Corporation 2's decision nodes are g.root.children[0] (Corporation 1 chooses Engage) and g.root.children[1] (Corporation 1 chooses Refrain).

# Step 4: Group the decision nodes into information sets.
# Corporation 2, moving simultaneously, does not know which action Corporation 1 has taken.
# Therefore, Corporation 2's decision nodes should be grouped in the same information set.

g.set_infoset(g.root.children[0], g.root.children[1].infoset)
```

```python
import pygambit as gbt

# Step 1: Identify the players and their actions.
# There are two players, Corporation 1 and Corporation 2.
# Both players have two actions: Engage in espionage or Refrain.

# Step 2: Determine the structure of the game.
# Since both players decide simultaneously, this game involves imperfect information.
# To model the game with a sequential structure, assume Corporation 1 moves first and Corporation 2 moves second.

# Create a new extensive-form game with two players
g = gbt.Game.new_tree(players=["Corporation 1", "Corporation 2"],
                      title="Industrial Espionage Game")

# Step 3: Identify the decision nodes.
# The starting node, g.root, is Corporation 1's decision node.
# Corporation 1 has two actions, Engage and Refrain.
g.append_move(g.root, "Corporation 1", ["Engage", "Refrain"])

# Corporation 2's decision nodes are g.root.children[0] (Corporation 1 chooses Engage) and g.root.children[1] (Corporation 1 chooses Refrain).
g.append_move(g.root.children[0], "Corporation 2", ["Engage", "Refrain"])
g.append_move(g.root.children[1], "Corporation 2", ["Engage", "Refrain"])

# Step 4: Group the decision nodes into information sets.
# Corporation 2, moving simultaneously, does not know which action Corporation 1 has taken.
# Therefore, Corporation 2's decision nodes should be grouped in the same information set.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)

# Step 5: Set the outcomes for each terminal node.
# If both engage in espionage, each receives a payoff of 2.
g.set_outcome(g.root.children[0].children[0], g.add_outcome([2, 2], label="Both Engage"))

# If Corporation 1 engages and Corporation 2 refrains, Corporation 1 receives 7 and Corporation 2 receives 1.
g.set_outcome(g.root.children[0].children[1], g.add_outcome([7, 1], label="Corp 1 Engages"))

# If Corporation 1 refrains and Corporation 2 engages, Corporation 1 receives 1 and Corporation 2 receives 7.
g.set_outcome(g.root.children[1].children[0], g.add_outcome([1, 7], label="Corp 2 Engages"))

# If neither engages in espionage, each receives a payoff of 5.
g.set_outcome(g.root.children[1].children[1], g.add_outcome([5, 5], label="Neither Engages"))

# Save the EFG
efg = g.write(format='native')
```