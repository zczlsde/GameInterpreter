```python
# Step 1: Identify the players and their actions.
# There are two players, both making a decision to either share or not share resources.

# Step 2: Determine the nature of the game.
# The game is simultaneous because both players decide whether to share or not share at the same time.

# Step 3: Model the game with a sequential structure.
# Assume Player 1 moves first and Player 2 moves second.

# Step 4: Identify the decision nodes for Player 2.
# Player 2's decision nodes are g.root.children[0] and g.root.children[1], corresponding to Player 1's actions (Share, Not Share).

# Step 5: Group Player 2's decision nodes in the same information set.
# Since Player 2 does not know Player 1's action, these nodes should be in the same information set.

g.set_infoset(g.root.children[0], g.root.children[1].infoset)
```

```python
import pygambit as gbt

# Step 1: Create a new extensive-form game with two players.
# The players are "Student 1" and "Student 2".
g = gbt.Game.new_tree(players=["Student 1", "Student 2"],
                      title="Graduate Students Resource Sharing Game")

# Step 2: Model the game with a sequential structure.
# Assume Student 1 moves first and Student 2 moves second.

# Step 3: Append moves for Student 1.
# Student 1 can choose to either "Share" or "Not Share".
g.append_move(g.root, "Student 1", ["Share", "Not Share"])

# Step 4: Append moves for Student 2.
# Student 2 can choose to either "Share" or "Not Share" after observing Student 1's action.
g.append_move(g.root.children[0], "Student 2", ["Share", "Not Share"])
g.append_move(g.root.children[1], "Student 2", ["Share", "Not Share"])

# Step 5: Set the information set for Student 2's decision nodes.
# Since Student 2 does not know Student 1's action, these nodes should be in the same information set.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)

# Step 6: Define the outcomes for each terminal node.
# If both share, each receives a payoff of 6.
outcome_both_share = g.add_outcome([6, 6], label="Both Share")
# If Student 1 shares and Student 2 does not, Student 1 receives 2 and Student 2 receives 8.
outcome_s1_share_s2_not = g.add_outcome([2, 8], label="S1 Share, S2 Not")
# If Student 1 does not share and Student 2 shares, Student 1 receives 8 and Student 2 receives 2.
outcome_s1_not_s2_share = g.add_outcome([8, 2], label="S1 Not, S2 Share")
# If neither shares, each receives a payoff of 4.
outcome_neither_share = g.add_outcome([4, 4], label="Neither Share")

# Step 7: Set the outcomes for each terminal node.
g.set_outcome(g.root.children[0].children[0], outcome_both_share)
g.set_outcome(g.root.children[0].children[1], outcome_s1_share_s2_not)
g.set_outcome(g.root.children[1].children[0], outcome_s1_not_s2_share)
g.set_outcome(g.root.children[1].children[1], outcome_neither_share)

# Save the EFG
efg = g.write(format='native')
```