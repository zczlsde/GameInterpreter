```python
# Step 1: Identify the players and their actions.
# There are two players, Country 1 and Country 2, and they must decide simultaneously whether to impose strict emission controls or not.

# Step 2: Since the players move simultaneously, this game involves imperfect information.
# To model the game with a sequential structure, assume Country 1 moves first and Country 2 moves second.

# Step 3: The starting node, g.root, is Country 1's decision node.
# Country 1 has two actions: Impose Controls or Not Impose Controls.

# Step 4: Country 2's decision nodes are g.root.children[0] and g.root.children[1], which correspond to Country 1's actions Impose Controls and Not Impose Controls.

# Step 5: Country 2, moving simultaneously, does not know which action Country 1 has taken.
# Therefore, Country 2's decision nodes should be grouped in the same information set.

g.set_infoset(g.root.children[0], g.root.children[1].infoset)
```

```python
import pygambit as gbt

# Step 1: Create a new extensive-form game with two players, Country 1 and Country 2.
g = gbt.Game.new_tree(players=["Country 1", "Country 2"],
                      title="Emission Control Game")

# Step 2: Country 1 moves first. Country 1 has two actions: Impose Controls or Not Impose Controls.
g.append_move(g.root, "Country 1", ["Impose Controls", "Not Impose Controls"])

# Step 3: Country 2 moves second. Country 2 also has two actions: Impose Controls or Not Impose Controls.
# Country 2's decision nodes are g.root.children[0] and g.root.children[1], which correspond to Country 1's actions.
g.append_move(g.root.children[0], "Country 2", ["Impose Controls", "Not Impose Controls"])
g.append_move(g.root.children[1], "Country 2", ["Impose Controls", "Not Impose Controls"])

# Step 4: Since the players move simultaneously, this game involves imperfect information.
# Country 2, moving simultaneously, does not know which action Country 1 has taken.
# Therefore, Country 2's decision nodes should be grouped in the same information set.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)

# Step 5: Define the outcomes for each possible combination of actions.
# If both impose controls, they collaborate to mitigate climate change.
collaborate = g.add_outcome([1, 1], label="Collaborate")

# If one imposes controls and the other doesn't, the controlling country bears economic costs.
control_costs = g.add_outcome([-1, 2], label="Control Costs")
polluter_benefits = g.add_outcome([2, -1], label="Polluter Benefits")

# If neither imposes controls, they both avoid economic costs but contribute to worsening climate conditions.
worsen_climate = g.add_outcome([0, 0], label="Worsen Climate")

# Step 6: Set the outcomes for each terminal node.
g.set_outcome(g.root.children[0].children[0], collaborate)  # Both impose controls
g.set_outcome(g.root.children[0].children[1], control_costs)  # Country 1 imposes, Country 2 does not
g.set_outcome(g.root.children[1].children[0], polluter_benefits)  # Country 1 does not impose, Country 2 imposes
g.set_outcome(g.root.children[1].children[1], worsen_climate)  # Neither imposes controls

# Save the EFG
efg = g.write(format='native')
```