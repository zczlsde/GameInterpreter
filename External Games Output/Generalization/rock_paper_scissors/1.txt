```python
# Step 1: Identify the players and their actions.
# There are two players, and they move simultaneously with three possible actions each: Rock, Paper, Scissors.

# Step 2: Since the players move simultaneously, this game involves imperfect information.
# To model the game with a sequential structure, assume Player 1 moves first and Player 2 moves second.

# Step 3: The starting node, g.root, is Player 1's decision node.
# Player 1 has three actions: Rock, Paper, Scissors.

# Step 4: Player 2's decision nodes are g.root.children[0], g.root.children[1], and g.root.children[2],
# which correspond to Player 1's actions Rock, Paper, and Scissors.

# Step 5: Player 2, moving simultaneously, does not know which action Player 1 has taken.
# Therefore, Player 2's decision nodes should be grouped in the same information set.

# Group all of Player 2's decision nodes in the same information set.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)
g.set_infoset(g.root.children[2], g.root.children[1].infoset)
```

```python
import pygambit as gbt

# Step 1: Create a new extensive-form game with two players.
g = gbt.Game.new_tree(players=["Player 1", "Player 2"], title="Rock-Paper-Scissors")

# Step 2: Model the game with a sequential structure to handle simultaneous moves.
# Assume Player 1 moves first and Player 2 moves second.

# Step 3: Player 1's decision node is the root of the game tree.
# Player 1 has three possible actions: Rock, Paper, Scissors.
g.append_move(g.root, "Player 1", ["Rock", "Paper", "Scissors"])

# Step 4: Player 2's decision nodes are the children of Player 1's actions.
# These nodes correspond to Player 1's actions: Rock, Paper, and Scissors.
g.append_move(g.root.children[0], "Player 2", ["Rock", "Paper", "Scissors"])
g.append_move(g.root.children[1], "Player 2", ["Rock", "Paper", "Scissors"])
g.append_move(g.root.children[2], "Player 2", ["Rock", "Paper", "Scissors"])

# Step 5: Since Player 2 moves simultaneously and does not know Player 1's action,
# group all of Player 2's decision nodes in the same information set.
g.set_infoset(g.root.children[0], g.root.children[1].infoset)
g.set_infoset(g.root.children[2], g.root.children[1].infoset)

# Step 6: Define the outcomes for each combination of actions.
# Rock vs Rock, Paper vs Paper, Scissors vs Scissors result in a tie.
tie = g.add_outcome([0, 0], label="Tie")
g.set_outcome(g.root.children[0].children[0], tie)
g.set_outcome(g.root.children[1].children[1], tie)
g.set_outcome(g.root.children[2].children[2], tie)

# Rock vs Scissors, Scissors vs Paper, Paper vs Rock result in Player 1 winning.
p1_wins = g.add_outcome([1, -1], label="Player 1 wins")
g.set_outcome(g.root.children[0].children[2], p1_wins)
g.set_outcome(g.root.children[1].children[0], p1_wins)
g.set_outcome(g.root.children[2].children[1], p1_wins)

# Scissors vs Rock, Paper vs Scissors, Rock vs Paper result in Player 2 winning.
p2_wins = g.add_outcome([-1, 1], label="Player 2 wins")
g.set_outcome(g.root.children[0].children[1], p2_wins)
g.set_outcome(g.root.children[1].children[2], p2_wins)
g.set_outcome(g.root.children[2].children[0], p2_wins)

# Save the EFG
efg = g.write(format='native')
```